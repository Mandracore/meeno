{
    "project": {
        "name": "Meeno source code documentation",
        "version": "0.2.5"
    },
    "files": {
        "public/javascripts/collections/filters.js": {
            "name": "public/javascripts/collections/filters.js",
            "modules": {},
            "classes": {
                "ObjectFilters": 1,
                "NoteFilters": 1,
                "TagFilters": 1,
                "TaskFilters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/notes.js": {
            "name": "public/javascripts/collections/notes.js",
            "modules": {},
            "classes": {
                "Notes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/tags.js": {
            "name": "public/javascripts/collections/tags.js",
            "modules": {},
            "classes": {
                "Tags": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/tasks.js": {
            "name": "public/javascripts/collections/tasks.js",
            "modules": {},
            "classes": {
                "Tasks": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/lib/backbone-relational.js": {
            "name": "public/javascripts/lib/backbone-relational.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/lib/backbone.localStorage-min.js": {
            "name": "public/javascripts/lib/backbone.localStorage-min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/filter.js": {
            "name": "public/javascripts/models/filter.js",
            "modules": {},
            "classes": {
                "ObjectFilter": 1,
                "TagFilter": 1,
                "TaskFilter": 1,
                "NoteFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/link.js": {
            "name": "public/javascripts/models/link.js",
            "modules": {},
            "classes": {
                "NoteTask": 1,
                "NoteTag": 1,
                "TaskTag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/note.js": {
            "name": "public/javascripts/models/note.js",
            "modules": {},
            "classes": {
                "Note": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/task.js": {
            "name": "public/javascripts/models/task.js",
            "modules": {},
            "classes": {
                "Task": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-filter.js": {
            "name": "public/javascripts/views/browser-body-filter.js",
            "modules": {},
            "classes": {
                "BrowserBodyFilterView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-note.js": {
            "name": "public/javascripts/views/browser-body-note.js",
            "modules": {},
            "classes": {
                "BrowserBodyNoteView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-object.js": {
            "name": "public/javascripts/views/browser-body-object.js",
            "modules": {},
            "classes": {
                "BrowserBodyObjectView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-tag.js": {
            "name": "public/javascripts/views/browser-body-tag.js",
            "modules": {},
            "classes": {
                "BrowserBodyTagView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-task.js": {
            "name": "public/javascripts/views/browser-body-task.js",
            "modules": {},
            "classes": {
                "BrowserBodyTaskView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body.js": {
            "name": "public/javascripts/views/browser-body.js",
            "modules": {},
            "classes": {
                "BrowserBodyView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-tab.js": {
            "name": "public/javascripts/views/browser-tab.js",
            "modules": {},
            "classes": {
                "BrowserTabView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser.js": {
            "name": "public/javascripts/views/browser.js",
            "modules": {},
            "classes": {
                "BrowserView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-body-object.js": {
            "name": "public/javascripts/views/editor-body-object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-body.js": {
            "name": "public/javascripts/views/editor-body.js",
            "modules": {},
            "classes": {
                "EditorBodyView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-tab.js": {
            "name": "public/javascripts/views/editor-tab.js",
            "modules": {},
            "classes": {
                "EditorTabView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor.js": {
            "name": "public/javascripts/views/editor.js",
            "modules": {},
            "classes": {
                "EditorView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/main.js": {
            "name": "public/javascripts/views/main.js",
            "modules": {},
            "classes": {
                "MainView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/app.js": {
            "name": "public/javascripts/app.js",
            "modules": {
                "App": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/temp.js": {
            "name": "public/javascripts/temp.js",
            "modules": {
                "temp": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/text.js": {
            "name": "public/javascripts/text.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/client/lib/jasmine-1.3.1/jasmine.js": {
            "name": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "App": {
            "name": "App",
            "submodules": {},
            "classes": {
                "ObjectFilters": 1,
                "NoteFilters": 1,
                "TagFilters": 1,
                "TaskFilters": 1,
                "Notes": 1,
                "Tags": 1,
                "Tasks": 1,
                "ObjectFilter": 1,
                "TagFilter": 1,
                "TaskFilter": 1,
                "NoteFilter": 1,
                "NoteTask": 1,
                "NoteTag": 1,
                "TaskTag": 1,
                "Note": 1,
                "Task": 1,
                "BrowserBodyFilterView": 1,
                "BrowserBodyNoteView": 1,
                "BrowserBodyObjectView": 1,
                "BrowserBodyTagView": 1,
                "BrowserBodyTaskView": 1,
                "BrowserBodyView": 1,
                "BrowserTabView": 1,
                "BrowserView": 1,
                "EditorBodyView": 1,
                "EditorTabView": 1,
                "EditorView": 1,
                "MainView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "public/javascripts/views/main.js",
            "line": 13,
            "description": "Meeno application core module"
        },
        "temp": {
            "name": "temp",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "public/javascripts/temp.js",
            "line": 1,
            "description": "Temporary business objects storage module: where all tasks, notes and other\nrecords and collections are stored during the application runtime"
        }
    },
    "classes": {
        "ObjectFilters": {
            "name": "ObjectFilters",
            "shortname": "ObjectFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/filters.js",
            "line": 8,
            "description": "Parent of the classes {{#crossLink \"NoteFilters\"}}{{/crossLink}}, {{#crossLink \"TaskFilters\"}}{{/crossLink}} and {{#crossLink \"TagFilters\"}}{{/crossLink}}.\nIt holds all the common methods necessary to deal with collections of filters.",
            "extends": "Backbone.Collection"
        },
        "NoteFilters": {
            "name": "NoteFilters",
            "shortname": "NoteFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/filters.js",
            "line": 25,
            "description": "This class defines a collection of {{#crossLink \"NoteFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "TagFilters": {
            "name": "TagFilters",
            "shortname": "TagFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/filters.js",
            "line": 36,
            "description": "This class defines a collection of {{#crossLink \"TagFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "TaskFilters": {
            "name": "TaskFilters",
            "shortname": "TaskFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/filters.js",
            "line": 47,
            "description": "This class defines a collection of {{#crossLink \"TaskFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "Notes": {
            "name": "Notes",
            "shortname": "Notes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/notes.js",
            "line": 9,
            "description": "This class holds collections of notes",
            "extends": "Backbone.Collection"
        },
        "Tags": {
            "name": "Tags",
            "shortname": "Tags",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/tags.js",
            "line": 8,
            "description": "This class holds collections of tags",
            "extends": "Backbone.Collection"
        },
        "Tasks": {
            "name": "Tasks",
            "shortname": "Tasks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/collections/tasks.js",
            "line": 10,
            "description": "Holds a collection of tasks",
            "extends": "Backbone.Collection"
        },
        "ObjectFilter": {
            "name": "ObjectFilter",
            "shortname": "ObjectFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/filter.js",
            "line": 10,
            "description": "Parent of the classes {{#crossLink \"NoteFilter\"}}{{/crossLink}}, {{#crossLink \"TaskFilter\"}}{{/crossLink}} and {{#crossLink \"TagFilter\"}}{{/crossLink}}.\nIt holds all the common methods.",
            "extends": "Backbone.RelationalModel"
        },
        "TagFilter": {
            "name": "TagFilter",
            "shortname": "TagFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/filter.js",
            "line": 114,
            "description": "Used to filter collections of {{#crossLink \"Tag\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "TaskFilter": {
            "name": "TaskFilter",
            "shortname": "TaskFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/filter.js",
            "line": 132,
            "description": "Used to filter collections of {{#crossLink \"Task\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "NoteFilter": {
            "name": "NoteFilter",
            "shortname": "NoteFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/filter.js",
            "line": 156,
            "description": "Used to filter collections of {{#crossLink \"Note\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "NoteTask": {
            "name": "NoteTask",
            "shortname": "NoteTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/link.js",
            "line": 7,
            "description": "This class holds the model relating one note to one task",
            "extends": "Backbone.RelationalModel"
        },
        "NoteTag": {
            "name": "NoteTag",
            "shortname": "NoteTag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/link.js",
            "line": 17,
            "description": "This class holds the model relating one note to one tag",
            "extends": "Backbone.RelationalModel"
        },
        "TaskTag": {
            "name": "TaskTag",
            "shortname": "TaskTag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/link.js",
            "line": 27,
            "description": "This class holds the model relating one task to one tag",
            "extends": "Backbone.RelationalModel"
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/note.js",
            "line": 8,
            "description": "This class holds the note model",
            "extends": "Backbone.RelationalModel"
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/models/task.js",
            "line": 8,
            "description": "Holds the task model"
        },
        "BrowserBodyFilterView": {
            "name": "BrowserBodyFilterView",
            "shortname": "BrowserBodyFilterView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 8,
            "description": "This class holds the view of the filter models that are used to filter the browser's search results.\nThis view can accept models of classes {{#crossLink \"NoteFilter\"}}{{/crossLink}},\n{{#crossLink \"TaskFilter\"}}{{/crossLink}} and {{#crossLink \"TagFilter\"}}{{/crossLink}}.",
            "extends": "Backbone.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Holds all the options of the view.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filterName",
                            "description": "Must be passed to initialize the view's model name.",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "BrowserBodyNoteView": {
            "name": "BrowserBodyNoteView",
            "shortname": "BrowserBodyNoteView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body-note.js",
            "line": 10,
            "description": "Displays notes in the browser.",
            "extends": "BrowserBodyObjectView"
        },
        "BrowserBodyObjectView": {
            "name": "BrowserBodyObjectView",
            "shortname": "BrowserBodyObjectView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body-object.js",
            "line": 9,
            "description": "This class retains all core features for displaying objects views in the browser.\nSeveral classes will inherit from it, one per kind of business object :\n- BrowserBodyNoteView\n- BrowserBodyTaskView\n- BrowserBodyTagView\n- ...",
            "extends": "Backbone.View"
        },
        "BrowserBodyTagView": {
            "name": "BrowserBodyTagView",
            "shortname": "BrowserBodyTagView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 9,
            "description": "A backbone view to display one tag in the browser",
            "extends": "BrowserBodyObjectView"
        },
        "BrowserBodyTaskView": {
            "name": "BrowserBodyTaskView",
            "shortname": "BrowserBodyTaskView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 11,
            "description": "Displays a task in the browser",
            "extends": "{BrowserBodyObjectView}"
        },
        "BrowserBodyView": {
            "name": "BrowserBodyView",
            "shortname": "BrowserBodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-body.js",
            "line": 15,
            "description": "This class will be used to support the main view of the object browser.\nFrom here, the user will be able to browse notes, tags and tasks, using filters and sorting out results.\nIt controls the creation of several subviews, like {{#crossLink \"BrowserBodyTagView\"}}{{/crossLink}},\n{{#crossLink \"BrowserBodyFilterView\"}}{{/crossLink}},...",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "Holds a reference to the mother browser view",
                    "type": "Object"
                }
            ],
            "extends": "Backbone.View"
        },
        "BrowserTabView": {
            "name": "BrowserTabView",
            "shortname": "BrowserTabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser-tab.js",
            "line": 7,
            "description": "This backbone view holds the browser tab (simple button) controlling the display of the body rendered by {{#crossLink \"BrowserBodyView\"}}{{/crossLink}}",
            "extends": "Backbone.View"
        },
        "BrowserView": {
            "name": "BrowserView",
            "shortname": "BrowserView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/browser.js",
            "line": 9,
            "description": "This class is mainly a proxy for two subclasses : {{#crossLink \"BrowserTabView\"}}{{/crossLink}} and {{#crossLink \"BrowserBodyView\"}}{{/crossLink}}.\nIt listens to the event tab:toggle:browser and make the two subviews visible.",
            "is_constructor": 1
        },
        "EditorBodyView": {
            "name": "EditorBodyView",
            "shortname": "EditorBodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/editor-body.js",
            "line": 12,
            "description": "This backbone view holds the body of a note editor (where the note is actually rendered)",
            "extends": "Backbone.View"
        },
        "EditorTabView": {
            "name": "EditorTabView",
            "shortname": "EditorTabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/editor-tab.js",
            "line": 6,
            "description": "This backbone view holds the editor tab (simple button) controlling the display of the body rendered by {{#crossLink \"EditorBodyView\"}}{{/crossLink}}",
            "extends": "Backbone.View"
        },
        "EditorView": {
            "name": "EditorView",
            "shortname": "EditorView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/editor.js",
            "line": 12,
            "description": "This backbone view holds the note editor",
            "extends": "Backbone.View"
        },
        "MainView": {
            "name": "MainView",
            "shortname": "MainView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "public/javascripts/views/main.js",
            "line": 13,
            "description": "This backbone view holds the entire UI.",
            "extends": "Backbone.View"
        }
    },
    "classitems": [
        {
            "file": "public/javascripts/collections/tags.js",
            "line": 19,
            "description": "Allows to search through a collection of tags based on full-text search (in label)",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "filter",
                    "description": "the filter used to search the collection",
                    "type": "TagFilter"
                }
            ],
            "return": {
                "description": "a new filtered collection of tags",
                "type": "Tags"
            },
            "chainable": 1,
            "class": "Tags"
        },
        {
            "file": "public/javascripts/collections/tasks.js",
            "line": 48,
            "description": "Allows to search through a collection of tasks with a complex filter based on full-text search (in label)\nand on tags related or not to the models. The filtering of tasks can also take into account the \"completed\"\nattribute.",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "filter",
                    "description": "the filter used to search the collection",
                    "type": "TaskFilter"
                }
            ],
            "return": {
                "description": "a new filtered collection of tasks",
                "type": "Tasks"
            },
            "chainable": 1,
            "class": "Tasks"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 2,
            "description": "Backbone-relational.js 0.7.0\n(c) 2011-2013 Paul Uithol\n\nBackbone-relational may be freely distributed under the MIT license; see the accompanying LICENSE.txt.\nFor details and documentation: https://github.com/PaulUithol/Backbone-relational.\nDepends on Backbone (and thus on Underscore as well): https://github.com/documentcloud/backbone.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 13,
            "description": "CommonJS shim",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 32,
            "description": "Semaphore mixin; can be used as both binary and counting.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 69,
            "description": "A BlockingQueue that accumulates items while blocked (via 'block'),\nand processes them when unblocked (via 'unblock').\nProcess can also be called manually (via 'process').",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 110,
            "description": "Global event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'update:<key>')\nuntil the top-level object is fully initialized (see 'Backbone.RelationalModel').",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 116,
            "description": "Backbone.Store keeps track of all created (and destruction of) Backbone.RelationalModel.\nHandles lookup for relations.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 131,
            "description": "Add a set of subModelTypes to the store, that can be used to resolve the '_superModel'\nfor a model later in 'setupSuperModel'.",
            "params": [
                {
                    "name": "subModelTypes",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                },
                {
                    "name": "superModelType",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 145,
            "description": "Check if the given modelType is registered as another model's subModel. If so, add it to the super model's\n'_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.",
            "params": [
                {
                    "name": "modelType",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 170,
            "description": "Add a reverse relation. Is added to the 'relations' property on model's prototype, and to\nexisting instances of 'model' in the store as well.",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "model",
                            "description": "",
                            "type": "Backbone.RelationalModel"
                        },
                        {
                            "name": "type",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "relatedModel",
                            "description": "",
                            "type": "String|Object"
                        }
                    ]
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 206,
            "description": "Add a 'relation' to all existing instances of 'relation.model' in the store",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 221,
            "description": "Find the Store's collection for a certain type of model.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "return": {
                "description": "A collection if found (or applicable for 'model'), or null",
                "type": "Backbone.Collection"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 247,
            "description": "Find a type on the global object by name. Splits name on dots.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 288,
            "description": "Find the attribute that is to be used as the `id` on a given object",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String|Number|Object|Backbone.RelationalModel"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 314,
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String|Number|Object|Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 336,
            "description": "Add a 'model' to it's appropriate collection. Retain the original contents of 'model.collection'.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 355,
            "description": "Explicitly update a model's id in it's store collection",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 364,
            "description": "Remove a 'model' from the store.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 376,
            "description": "The main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\nare used to regulate addition and removal of models from relations.",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "relatedModel",
                            "description": "",
                            "type": "Backbone.RelationalModel.constructor"
                        },
                        {
                            "name": "includeInJSON",
                            "description": "Serialize the given attribute for related model(s)' in toJSON, or just their ids.",
                            "type": "Boolean|String",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "createModels",
                            "description": "Create objects from the contents of keys if the object is not found in Backbone.store.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "reverseRelation",
                            "description": "Specify a bi-directional relation. If provided, Relation will reciprocate\n   the relation to the 'relatedModel'. Required and optional properties match 'options', except that it also needs\n   {Backbone.Relation|String} type ('HasOne' or 'HasMany').",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 494,
            "description": "Check several pre-conditions.",
            "return": {
                "description": "True if pre-conditions are satisfied, false if they're not.",
                "type": "Boolean"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 543,
            "description": "Set the related model(s) for this relation",
            "params": [
                {
                    "name": "related",
                    "description": "",
                    "type": "Backbone.Model|Backbone.Collection"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 556,
            "description": "Determine if a relation (on a different RelationalModel) is the reverse\nrelation of the current one.",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Backbone.Relation"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 570,
            "description": "Get the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).",
            "params": [
                {
                    "name": "model",
                    "description": "Get the reverse relations for a specific model.\n   If not specified, 'this.related' is used.",
                    "type": "Backbone.RelationalModel",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.Relation[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 591,
            "description": "Rename options.silent to options.silentChange, so events propagate properly.\n(for example in HasMany, from 'addRelated'->'handleAddition')",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 606,
            "description": "Rename options.silentChange to options.silent, so events are silenced as intended in Backbone's\noriginal functions.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 669,
            "description": "If the key is changed, notify old & new reverse relations and initialize the new relation",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 726,
            "description": "If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 805,
            "description": "Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\nIf no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.",
            "params": [
                {
                    "name": "collection",
                    "description": "",
                    "type": "Backbone.Collection",
                    "optional": true
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 880,
            "description": "If the key is changed, notify old & new reverse relations and initialize the new relation",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 953,
            "description": "When a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', must set 'this.instance' as their related).",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 978,
            "description": "When a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', which should be nullified)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1027,
            "description": "A type of Backbone.Model that also maintains relations to other models and collections.\nNew events when compared to the original:\n - 'add:<key>' (model, related collection, options)\n - 'remove:<key>' (model, related collection, options)\n - 'update:<key>' (model, related model or collection, options)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1081,
            "description": "Override 'trigger' to queue 'change' and 'change:*' events",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1098,
            "description": "Initialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\nInvoked in the first call so 'set' (which is made from the Backbone.Model constructor).",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1121,
            "description": "When new values are set, notify this model's relations (also if options.silent is set).\n(Relation.setRelated locks this model before calling 'set' on it to prevent loops)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1137,
            "description": "Either add to the queue (if we're not initialized yet), or execute right away.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1144,
            "description": "Process _queue",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1153,
            "description": "Get a specific relation.",
            "params": [
                {
                    "name": "key",
                    "description": "The relation key to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An instance of 'Backbone.Relation', if a relation was found for 'key', or null.",
                "type": "Backbone.Relation"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1166,
            "description": "Get all of the created relations.",
            "return": {
                "description": "",
                "type": "Backbone.Relation[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1174,
            "description": "Retrieve related objects.",
            "params": [
                {
                    "name": "key",
                    "description": "The relation key to fetch models for.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for 'Backbone.Model.fetch' and 'Backbone.sync'.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "update",
                    "description": "Whether to force a fetch from the server (updating existing models).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An array of request objects",
                "type": "jQuery.when[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1317,
            "description": "Override 'change', so the change will only execute after 'set' has finised (relations are updated),\nand 'previousAttributes' will be available when the event is fired.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1341,
            "description": "Convert relations to JSON, omits them when required",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1442,
            "description": "The related model might not be defined for two reasons\n 1. it never gets defined, e.g. a typo\n 2. it is related to itself\nIn neither of these cases do we need to pre-initialize reverse relations.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1462,
            "description": "Create a 'Backbone.Model' instance based on 'attributes'.",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.Model"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1522,
            "description": "Find an instance of `this` type in 'Backbone.Relational.store'.\n- If `attributes` is a string or a number, `findOrCreate` will just query the `store` and return a model if found.\n- If `attributes` is an object, the model will be updated with `attributes` if found.\n  Otherwise, a new model is created with `attributes` (unless `options.create` is explicitly set to `false`).",
            "params": [
                {
                    "name": "attributes",
                    "description": "Either a model's id, or the attributes used to create or update a model.",
                    "type": "Object|String|Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "create",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.RelationalModel"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1553,
            "description": "Override Backbone.Collection._prepareModel, so objects will be built using the correct type\nif the collection.model has subModels.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1587,
            "description": "Override Backbone.Collection.add, so objects fetched from the server multiple times will\nupdate the existing Model. Also, trigger 'relational:add'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1625,
            "description": "Override 'Backbone.Collection.remove' to trigger 'relational:remove'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1651,
            "description": "Override 'Backbone.Collection.reset' to trigger 'relational:reset'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1662,
            "description": "Override 'Backbone.Collection.sort' to trigger 'relational:reset'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1673,
            "description": "Override 'Backbone.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\nare ready.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone.localStorage-min.js",
            "line": 1,
            "description": "Backbone localStorage Adapter\nhttps://github.com/jeromegn/Backbone.localStorage\n/(function(){function n(){return((1+Math.random())*65536|0).toString(16).substring(1)}function r(){return n()+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+n()+n()}var e=this._,t=this.Backbone;t.LocalStorage=window.Store=function(e){this.name=e;var t=this.localStorage().getItem(this.name);this.records=t&&t.split(\",\")||[]},e.extend(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(\",\"))},create:function(e){return e.id||(e.id=r(),e.set(e.idAttribute,e.id)),this.localStorage().setItem(this.name+\"-\"+e.id,JSON.stringify(e)),this.records.push(e.id.toString()),this.save(),e.toJSON()},update:function(t){return this.localStorage().setItem(this.name+\"-\"+t.id,JSON.stringify(t)),e.include(this.records,t.id.toString())||this.records.push(t.id.toString()),this.save(),t.toJSON()},find:function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e.id))},findAll:function(){return e(this.records).chain().map(function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e))},this).compact().value()},destroy:function(t){return this.localStorage().removeItem(this.name+\"-\"+t.id),this.records=e.reject(this.records,function(e){return e==t.id.toString()}),this.save(),t},localStorage:function(){return localStorage}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(e,t,n,r){var i=t.localStorage||t.collection.localStorage;typeof n==\"function\"&&(n={success:n,error:r});var s,o=$.Deferred&&$.Deferred();switch(e){case\"read\":s=t.id!=undefined?i.find(t):i.findAll();break;case\"create\":s=i.create(t);break;case\"update\":s=i.update(t);break;case\"delete\":s=i.destroy(t)}return s?(n.success(s),o&&o.resolve()):(n.error(\"Record not found\"),o&&o.reject()),o&&o.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(e){return e.localStorage||e.collection&&e.collection.localStorage?t.LocalStorage.sync:t.ajaxSync},t.sync=function(e,n,r,i){return t.getSyncMethod(n).apply(this,[e,n,r,i])}})();",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/models/task.js",
            "line": 33,
            "description": "This method overrides the one provided by Backbone so that the attribute cid is also included in the json output\nThis is necessary for decoupling testing from database : we need unique IDs in unit testing but we don't \nwant to rely on a database layer",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "all the attributes of the model put in a json object",
                "type": "Json"
            },
            "class": "Task"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 35,
            "description": "Renders one filter : generates the HTML and appends it to the DOM element of the view",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 47,
            "description": "Called every time the filters of the {{#crossLink \"BrowserBodyView\"}}browser{{/crossLink}} \nare updated. Checks if its model is similar to the one in use in the browser and \nhighlights it if it's true.",
            "itemtype": "method",
            "name": "checkStatus",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 64,
            "description": "Called when the user clicks on the view.\nUpdates the right {{#crossLink \"BrowserBodyView\"}}browser{{/crossLink}}'s \nfilter to clone the view's model properties and highlights it.",
            "itemtype": "method",
            "name": "activate",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 77,
            "description": "Will destroy both the view and its model if it is currently active.",
            "itemtype": "method",
            "name": "removeIfActive",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 27,
            "description": "Renders one tag : generates the HTML and appends it to the DOM element of the view",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 38,
            "description": "Event triggered on `channel` when this.render() method is called",
            "itemtype": "event",
            "name": "browser:tags:reSyncSelectors",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 46,
            "description": "Displays an input to edit the tag label",
            "itemtype": "method",
            "name": "edit",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 57,
            "description": "Sets the view's model label to the input (`span.label`) value and saves the model",
            "itemtype": "method",
            "name": "save",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 77,
            "description": "Will destroy the view's model and the view itself when the user clics on `.delete` class DOM element",
            "itemtype": "method",
            "name": "delete",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 33,
            "itemtype": "method",
            "name": "initialize",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 40,
            "description": "This method aims at rendering the HTML elements for a given task model.\nOnce it is appended to the DOM, some event bindings are also done.\nIn particular, we control the events occuring when the ENTER key is pressed,\nso that the browser does not try to submit the form by faking a click event on\nthe closest button (which triggers unwanted behaviours).",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 98,
            "itemtype": "method",
            "name": "edit",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 107,
            "description": "Updates the view after the user modified the tags related to the task",
            "itemtype": "method",
            "name": "renderTagUpdate",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 119,
            "description": "When the user tries to link the task to a new tag, this method will create the desired tag \nand link it to the view's model.",
            "itemtype": "method",
            "name": "addNewTag",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 154,
            "description": "Should initialize the task's tag autocomplete input and allow for linking existing tags\nto the task.\nTo be called only when a task is being edited, and deleted when its form is closed",
            "itemtype": "method",
            "name": "initAutocomplete",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 189,
            "description": "Saves the changes made into the database",
            "itemtype": "method",
            "name": "update",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 202,
            "description": "Should unlink the clicked tag from the task",
            "itemtype": "method",
            "name": "unlink",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 217,
            "description": "Will update the model (complete the task) and relaunch rendering.\nIt can also uncheck task.",
            "itemtype": "method",
            "name": "check",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 230,
            "description": "Will reset the model to the value stored in DB and re-render the view accordingly.",
            "itemtype": "method",
            "name": "reset",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 244,
            "description": "To remove the view's model from database and kill the view.",
            "itemtype": "method",
            "name": "delete",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 254,
            "description": "To close the task form",
            "itemtype": "method",
            "name": "close",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 167,
            "description": "Should become the one proxy for all keyboard events. For now, it is only used for\ntask creation.",
            "itemtype": "method",
            "name": "kbEventProxy",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 186,
            "description": "Forces the browser-body to update the data attributes of the dropzones so that\nthe behavior remains consistent from one day to another even if the page\nis not reloaded. It should be using a today date passed as parameter, just like {{setupMilestones}}",
            "itemtype": "method",
            "name": "setupDropZones",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 211,
            "description": "Forces the browser-body to update the milestones it should render along with the tasks.\nIndeed, the milestones to display will change depending on the day of the week.",
            "itemtype": "method",
            "name": "setupMilestones",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 252,
            "description": "Makes the browser visible",
            "itemtype": "method",
            "name": "toggle",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 266,
            "description": "Displays the adequate subsection of the browser (notes, tags or tasks) when the user clicks\non the right button (class `.filter li`).",
            "itemtype": "method",
            "name": "toggleObject",
            "params": [
                {
                    "name": "event",
                    "description": "Backbone event",
                    "type": "Event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 291,
            "description": "When a user wants to create a new task by clicking on a submit button",
            "itemtype": "method",
            "name": "newTask",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 303,
            "description": "Child of the method {{#crossLink \"BrowserBodyView/newTask:method\"}}{{/crossLink}}.\nAllows to have the same behaviour, regardless of how the user validates the creation. So the calling method can be\neither {{#crossLink \"BrowserBodyView/newTask:method\"}}{{/crossLink}} (creation by click on button) or\n{{#crossLink \"BrowserBodyView/kbEventProxy:method\"}}{{/crossLink}} (creation by keying ENTER).",
            "itemtype": "method",
            "name": "newTaskSub",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 331,
            "description": "Manages the buttons \"select all\" and \"unselect all\". Will be called every time an object\nis selected or unseleted to make sure that the right buttons are displayed",
            "itemtype": "method",
            "name": "actionSelectorsUpdate",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 356,
            "description": "Should select all objects",
            "itemtype": "method",
            "name": "actionSelectAll",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 369,
            "description": "Should unselect all objects",
            "itemtype": "method",
            "name": "actionUnSelectAll",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 382,
            "description": "Displays or hides the controls necessary to select/unselect all objects, delete them,...\nThrows an event to make subviews display their checkboxes",
            "itemtype": "method",
            "name": "actionDeleteToggle",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 398,
            "description": "To make objects subviews show/hide their checkbox.",
            "itemtype": "event",
            "name": "browser:actions:toggle-checkboxes:[collName]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 409,
            "description": "Triggers an event, which will be heard by sub-views that will actually execute the action",
            "itemtype": "method",
            "name": "actionDeleteExecute",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 419,
            "description": "To make objects subviews kill themselves and destroy their model if they are selected.",
            "itemtype": "event",
            "name": "browser:actions:delete:[collName]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 437,
            "itemtype": "method",
            "name": "toggleTasks",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 454,
            "description": "Checks whether the user is currently using a search input and if so tells which collection is visible",
            "itemtype": "method",
            "name": "searchGetFocus",
            "return": {
                "description": "Returns the name of the collection studied (example : `notes`) or `false` if no search input has focus",
                "type": "Object"
            },
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 472,
            "description": "Will prepare and open an autocomplete input.\nIt should help the user selecting objects from collection named `sColl2` (example : `tags`) \nthat will then be used to filter the objects from collection named `sColl1`",
            "itemtype": "method",
            "name": "searchOpenAutocomplete",
            "params": [
                {
                    "name": "sColl2",
                    "description": "the name of the collection (example : `tags`) used to filter the collection currently displayed in browser"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 523,
            "description": "Controls what happens when the user tries to close the autocomplete",
            "itemtype": "method",
            "name": "searchCloseAutocomplete",
            "params": [
                {
                    "name": "event",
                    "description": "the keyboard event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 541,
            "description": "Allows to remove from current filter the object that has been clicked on",
            "itemtype": "method",
            "name": "searchObjectRemove",
            "params": [
                {
                    "name": "event",
                    "description": "the click event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 556,
            "description": "Updates current filter with the text typed in by the user",
            "itemtype": "method",
            "name": "searchText",
            "params": [
                {
                    "name": "event",
                    "description": "the keyboard event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 570,
            "description": "Should update the controls to save/delete filters\nIf temp contains a filter similar to the one that is currently applied, we propose to delete it\nIf not, we propose to save the currently applied one",
            "itemtype": "method",
            "name": "searchFiltersCtrlUpd",
            "params": [
                {
                    "name": "collName",
                    "description": "the name of the collection (example : `tags`)",
                    "type": "String"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 594,
            "description": "Displays the controls necessary to save a filter",
            "itemtype": "method",
            "name": "searchFilterSave1",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 607,
            "description": "Saves the new filter with the chosen name and hides the controls",
            "itemtype": "method",
            "name": "searchFilterSave2",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 627,
            "description": "Sends an event to make the filter view holding the active filter destroy its model",
            "itemtype": "method",
            "name": "searchFilterDelete",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 636,
            "description": "Will make the view holding the active filter destroy its model",
            "itemtype": "event",
            "name": "browser:search:filters:remove:[filter-name]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 643,
            "description": "Renders all the filters stored in the temp storage.",
            "itemtype": "method",
            "name": "searchRenderFilters",
            "params": [
                {
                    "name": "filtersCollName",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 673,
            "description": "Forces the view's current filter to match the one clicked by the user",
            "itemtype": "method",
            "name": "searchRenderFilterSuper",
            "params": [
                {
                    "name": "filter",
                    "description": "the model held by the filter view clicked on by the user"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 716,
            "description": "Forces the view's current filter to match the one clicked by the user",
            "itemtype": "method",
            "name": "searchFilterActivate",
            "params": [
                {
                    "name": "filter",
                    "description": "the model held by the filter view clicked on by the user"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 727,
            "description": "This event is listened by filter views to make them check\nif they are active",
            "itemtype": "event",
            "name": "browser:search:filters:check-status:[filter-name]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 739,
            "itemtype": "method",
            "name": "render",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 748,
            "itemtype": "method",
            "name": "renderCollection",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 821,
            "description": "This methods aims at saving the new positions of the objects",
            "itemtype": "method",
            "name": "sortableUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "http://api.jqueryui.com/sortable/#event-update the event triggered by jQuery",
                    "type": "JQuery event"
                },
                {
                    "name": "ui",
                    "description": "http://api.jqueryui.com/sortable/#event-update the ui object that is sortable",
                    "type": "JQuery ui"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 878,
            "description": "This methods aims at preparing the rendering of the tasks with the milestones at the right place\nIt can be used only with tasks sorted by todo_at date",
            "itemtype": "method",
            "name": "insertMilestones",
            "params": [
                {
                    "name": "list",
                    "description": "The list of tasks",
                    "type": "Array"
                },
                {
                    "name": "milestones",
                    "description": "The milestones list to be inserted within the tasks",
                    "type": "Array"
                },
                {
                    "name": "result",
                    "description": "The final list of objects that should be rendered",
                    "type": "Array"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/editor-body-object.js",
            "line": 56,
            "description": "Filters the keyboard events to pass only ENTER and TAB to the lock() method",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event",
                    "type": "Keyboard event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorBodyView"
        },
        {
            "file": "public/javascripts/views/editor-body-object.js",
            "line": 100,
            "description": "Triggered once the user finishes typing in the new object.\nUsed as a proxy to either link the note to a new object, or to create a new object",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event",
                    "type": "Keyboard event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorBodyView"
        },
        {
            "file": "public/javascripts/text.js",
            "line": 1,
            "license": "RequireJS text 2.0.12 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/requirejs/text for details",
            "class": "",
            "module": "temp"
        },
        {
            "file": "public/javascripts/text.js",
            "line": 77,
            "description": "Parses a resource name into its component parts. Resource names\nlook like: module/name.ext!strip, where the !strip part is\noptional.",
            "params": [
                {
                    "name": "name",
                    "description": "the resource name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with properties \"moduleName\", \"ext\" and \"strip\"\nwhere strip is a boolean.",
                "type": "Object"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "public/javascripts/text.js",
            "line": 121,
            "description": "Is an URL on another domain. Only works for browser use, returns\nfalse in non-browser environments. Only used to know if an\noptimized .js version of a text resource should be loaded\ninstead.",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 37,
            "description": "Maximum levels of nesting that will be included when an object is pretty-printed",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 42,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 47,
            "description": "By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 62,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 126,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 134,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 144,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 154,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 164,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 175,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 187,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 197,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 211,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 226,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 271,
            "description": "The name of the spy, if provided.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 275,
            "description": "Is this Object a spy?",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 279,
            "description": "The actual function this spy stubs.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 284,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 293,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 307,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 323,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 342,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 361,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 381,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 427,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 437,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 455,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 465,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods",
                "type": "jasmine.Spy"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 485,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 503,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 516,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "jasmine.Matchers"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 530,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 540,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 551,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 563,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 575,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 587,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 607,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 646,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 651,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 659,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 713,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 751,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 762,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 779,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 786,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 793,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1013,
            "is_constructor": 1,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1044,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1071,
            "is_constructor": 1,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1173,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1250,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1258,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1267,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1276,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1285,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1295,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1304,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1311,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1318,
            "description": "Matcher that compares the actual to null.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1325,
            "description": "Matcher that compares the actual to NaN.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1336,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1344,
            "description": "Matcher that boolean nots the actual.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1352,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1374,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1377,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1401,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1426,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1429,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1446,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1455,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1473,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision,",
                    "description": "as number of decimal places",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1487,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1664,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1760,
            "is_constructor": 1,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1795,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1801,
            "description": "The total count of results",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1805,
            "description": "Number of passed results",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1809,
            "description": "Number of failed results",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1813,
            "description": "Was this suite/spec skipped?",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1817,
            "ignore": "",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1823,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1834,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1842,
            "description": "Getter for the results: message & results.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1849,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1869,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1875,
            "description": "Base class for pretty printing for expectation results.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1882,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2123,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2200,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2239,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2262,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2275,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2287,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2443,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "",
            "module": "temp"
        },
        {
            "file": "test/client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2540,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "temp"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " public/javascripts/text.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/javascripts/text.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/javascripts/text.js:121"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBackbone-relational.js 0.7.0\n(c) 2011-2013 Paul Uithol\n\nBackbone-relational may be freely distributed under the MIT license; see the accompanying LICENSE.txt.\nFor details and documentation: https://github.com/PaulUithol/Backbone-relational.\nDepends on Backbone (and thus on Underscore as well): https://github.com/documentcloud/backbone.",
            "line": " public/javascripts/lib/backbone-relational.js:2"
        },
        {
            "message": "Missing item type\nCommonJS shim",
            "line": " public/javascripts/lib/backbone-relational.js:13"
        },
        {
            "message": "Missing item type\nSemaphore mixin; can be used as both binary and counting.",
            "line": " public/javascripts/lib/backbone-relational.js:32"
        },
        {
            "message": "Missing item type\nA BlockingQueue that accumulates items while blocked (via 'block'),\nand processes them when unblocked (via 'unblock').\nProcess can also be called manually (via 'process').",
            "line": " public/javascripts/lib/backbone-relational.js:69"
        },
        {
            "message": "Missing item type\nGlobal event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'update:<key>')\nuntil the top-level object is fully initialized (see 'Backbone.RelationalModel').",
            "line": " public/javascripts/lib/backbone-relational.js:110"
        },
        {
            "message": "Missing item type\nBackbone.Store keeps track of all created (and destruction of) Backbone.RelationalModel.\nHandles lookup for relations.",
            "line": " public/javascripts/lib/backbone-relational.js:116"
        },
        {
            "message": "Missing item type\nAdd a set of subModelTypes to the store, that can be used to resolve the '_superModel'\nfor a model later in 'setupSuperModel'.",
            "line": " public/javascripts/lib/backbone-relational.js:131"
        },
        {
            "message": "Missing item type\nCheck if the given modelType is registered as another model's subModel. If so, add it to the super model's\n'_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.",
            "line": " public/javascripts/lib/backbone-relational.js:145"
        },
        {
            "message": "Missing item type\nAdd a reverse relation. Is added to the 'relations' property on model's prototype, and to\nexisting instances of 'model' in the store as well.",
            "line": " public/javascripts/lib/backbone-relational.js:170"
        },
        {
            "message": "Missing item type\nAdd a 'relation' to all existing instances of 'relation.model' in the store",
            "line": " public/javascripts/lib/backbone-relational.js:206"
        },
        {
            "message": "Missing item type\nFind the Store's collection for a certain type of model.",
            "line": " public/javascripts/lib/backbone-relational.js:221"
        },
        {
            "message": "Missing item type\nFind a type on the global object by name. Splits name on dots.",
            "line": " public/javascripts/lib/backbone-relational.js:247"
        },
        {
            "message": "Missing item type\nFind the attribute that is to be used as the `id` on a given object",
            "line": " public/javascripts/lib/backbone-relational.js:288"
        },
        {
            "message": "Missing item type",
            "line": " public/javascripts/lib/backbone-relational.js:314"
        },
        {
            "message": "Missing item type\nAdd a 'model' to it's appropriate collection. Retain the original contents of 'model.collection'.",
            "line": " public/javascripts/lib/backbone-relational.js:336"
        },
        {
            "message": "Missing item type\nExplicitly update a model's id in it's store collection",
            "line": " public/javascripts/lib/backbone-relational.js:355"
        },
        {
            "message": "Missing item type\nRemove a 'model' from the store.",
            "line": " public/javascripts/lib/backbone-relational.js:364"
        },
        {
            "message": "Missing item type\nThe main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\nare used to regulate addition and removal of models from relations.",
            "line": " public/javascripts/lib/backbone-relational.js:376"
        },
        {
            "message": "Missing item type\nCheck several pre-conditions.",
            "line": " public/javascripts/lib/backbone-relational.js:494"
        },
        {
            "message": "Missing item type\nSet the related model(s) for this relation",
            "line": " public/javascripts/lib/backbone-relational.js:543"
        },
        {
            "message": "Missing item type\nDetermine if a relation (on a different RelationalModel) is the reverse\nrelation of the current one.",
            "line": " public/javascripts/lib/backbone-relational.js:556"
        },
        {
            "message": "Missing item type\nGet the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).",
            "line": " public/javascripts/lib/backbone-relational.js:570"
        },
        {
            "message": "Missing item type\nRename options.silent to options.silentChange, so events propagate properly.\n(for example in HasMany, from 'addRelated'->'handleAddition')",
            "line": " public/javascripts/lib/backbone-relational.js:591"
        },
        {
            "message": "Missing item type\nRename options.silentChange to options.silent, so events are silenced as intended in Backbone's\noriginal functions.",
            "line": " public/javascripts/lib/backbone-relational.js:606"
        },
        {
            "message": "Missing item type\nIf the key is changed, notify old & new reverse relations and initialize the new relation",
            "line": " public/javascripts/lib/backbone-relational.js:669"
        },
        {
            "message": "Missing item type\nIf a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'",
            "line": " public/javascripts/lib/backbone-relational.js:726"
        },
        {
            "message": "Missing item type\nBind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\nIf no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.",
            "line": " public/javascripts/lib/backbone-relational.js:805"
        },
        {
            "message": "Missing item type\nIf the key is changed, notify old & new reverse relations and initialize the new relation",
            "line": " public/javascripts/lib/backbone-relational.js:880"
        },
        {
            "message": "Missing item type\nWhen a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', must set 'this.instance' as their related).",
            "line": " public/javascripts/lib/backbone-relational.js:953"
        },
        {
            "message": "Missing item type\nWhen a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', which should be nullified)",
            "line": " public/javascripts/lib/backbone-relational.js:978"
        },
        {
            "message": "Missing item type\nA type of Backbone.Model that also maintains relations to other models and collections.\nNew events when compared to the original:\n - 'add:<key>' (model, related collection, options)\n - 'remove:<key>' (model, related collection, options)\n - 'update:<key>' (model, related model or collection, options)",
            "line": " public/javascripts/lib/backbone-relational.js:1027"
        },
        {
            "message": "Missing item type\nOverride 'trigger' to queue 'change' and 'change:*' events",
            "line": " public/javascripts/lib/backbone-relational.js:1081"
        },
        {
            "message": "Missing item type\nInitialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\nInvoked in the first call so 'set' (which is made from the Backbone.Model constructor).",
            "line": " public/javascripts/lib/backbone-relational.js:1098"
        },
        {
            "message": "Missing item type\nWhen new values are set, notify this model's relations (also if options.silent is set).\n(Relation.setRelated locks this model before calling 'set' on it to prevent loops)",
            "line": " public/javascripts/lib/backbone-relational.js:1121"
        },
        {
            "message": "Missing item type\nEither add to the queue (if we're not initialized yet), or execute right away.",
            "line": " public/javascripts/lib/backbone-relational.js:1137"
        },
        {
            "message": "Missing item type\nProcess _queue",
            "line": " public/javascripts/lib/backbone-relational.js:1144"
        },
        {
            "message": "Missing item type\nGet a specific relation.",
            "line": " public/javascripts/lib/backbone-relational.js:1153"
        },
        {
            "message": "Missing item type\nGet all of the created relations.",
            "line": " public/javascripts/lib/backbone-relational.js:1166"
        },
        {
            "message": "Missing item type\nRetrieve related objects.",
            "line": " public/javascripts/lib/backbone-relational.js:1174"
        },
        {
            "message": "Missing item type\nOverride 'change', so the change will only execute after 'set' has finised (relations are updated),\nand 'previousAttributes' will be available when the event is fired.",
            "line": " public/javascripts/lib/backbone-relational.js:1317"
        },
        {
            "message": "Missing item type\nConvert relations to JSON, omits them when required",
            "line": " public/javascripts/lib/backbone-relational.js:1341"
        },
        {
            "message": "Missing item type\nThe related model might not be defined for two reasons\n 1. it never gets defined, e.g. a typo\n 2. it is related to itself\nIn neither of these cases do we need to pre-initialize reverse relations.",
            "line": " public/javascripts/lib/backbone-relational.js:1442"
        },
        {
            "message": "Missing item type\nCreate a 'Backbone.Model' instance based on 'attributes'.",
            "line": " public/javascripts/lib/backbone-relational.js:1462"
        },
        {
            "message": "Missing item type\nFind an instance of `this` type in 'Backbone.Relational.store'.\n- If `attributes` is a string or a number, `findOrCreate` will just query the `store` and return a model if found.\n- If `attributes` is an object, the model will be updated with `attributes` if found.\n  Otherwise, a new model is created with `attributes` (unless `options.create` is explicitly set to `false`).",
            "line": " public/javascripts/lib/backbone-relational.js:1522"
        },
        {
            "message": "Missing item type\nOverride Backbone.Collection._prepareModel, so objects will be built using the correct type\nif the collection.model has subModels.",
            "line": " public/javascripts/lib/backbone-relational.js:1553"
        },
        {
            "message": "Missing item type\nOverride Backbone.Collection.add, so objects fetched from the server multiple times will\nupdate the existing Model. Also, trigger 'relational:add'.",
            "line": " public/javascripts/lib/backbone-relational.js:1587"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.remove' to trigger 'relational:remove'.",
            "line": " public/javascripts/lib/backbone-relational.js:1625"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.reset' to trigger 'relational:reset'.",
            "line": " public/javascripts/lib/backbone-relational.js:1651"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.sort' to trigger 'relational:reset'.",
            "line": " public/javascripts/lib/backbone-relational.js:1662"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\nare ready.",
            "line": " public/javascripts/lib/backbone-relational.js:1673"
        },
        {
            "message": "Missing item type\nBackbone localStorage Adapter\nhttps://github.com/jeromegn/Backbone.localStorage\n/(function(){function n(){return((1+Math.random())*65536|0).toString(16).substring(1)}function r(){return n()+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+n()+n()}var e=this._,t=this.Backbone;t.LocalStorage=window.Store=function(e){this.name=e;var t=this.localStorage().getItem(this.name);this.records=t&&t.split(\",\")||[]},e.extend(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(\",\"))},create:function(e){return e.id||(e.id=r(),e.set(e.idAttribute,e.id)),this.localStorage().setItem(this.name+\"-\"+e.id,JSON.stringify(e)),this.records.push(e.id.toString()),this.save(),e.toJSON()},update:function(t){return this.localStorage().setItem(this.name+\"-\"+t.id,JSON.stringify(t)),e.include(this.records,t.id.toString())||this.records.push(t.id.toString()),this.save(),t.toJSON()},find:function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e.id))},findAll:function(){return e(this.records).chain().map(function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e))},this).compact().value()},destroy:function(t){return this.localStorage().removeItem(this.name+\"-\"+t.id),this.records=e.reject(this.records,function(e){return e==t.id.toString()}),this.save(),t},localStorage:function(){return localStorage}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(e,t,n,r){var i=t.localStorage||t.collection.localStorage;typeof n==\"function\"&&(n={success:n,error:r});var s,o=$.Deferred&&$.Deferred();switch(e){case\"read\":s=t.id!=undefined?i.find(t):i.findAll();break;case\"create\":s=i.create(t);break;case\"update\":s=i.update(t);break;case\"delete\":s=i.destroy(t)}return s?(n.success(s),o&&o.resolve()):(n.error(\"Record not found\"),o&&o.reject()),o&&o.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(e){return e.localStorage||e.collection&&e.collection.localStorage?t.LocalStorage.sync:t.ajaxSync},t.sync=function(e,n,r,i){return t.getSyncMethod(n).apply(this,[e,n,r,i])}})();",
            "line": " public/javascripts/lib/backbone.localStorage-min.js:1"
        },
        {
            "message": "Missing item type\nFilters the keyboard events to pass only ENTER and TAB to the lock() method",
            "line": " public/javascripts/views/editor-body-object.js:56"
        },
        {
            "message": "Missing item type\nTriggered once the user finishes typing in the new object.\nUsed as a proxy to either link the note to a new object, or to create a new object",
            "line": " public/javascripts/views/editor-body-object.js:100"
        },
        {
            "message": "Missing item type",
            "line": " public/javascripts/text.js:1"
        },
        {
            "message": "Missing item type\nParses a resource name into its component parts. Resource names\nlook like: module/name.ext!strip, where the !strip part is\noptional.",
            "line": " public/javascripts/text.js:77"
        },
        {
            "message": "Missing item type\nIs an URL on another domain. Only works for browser use, returns\nfalse in non-browser environments. Only used to know if an\noptimized .js version of a text resource should be loaded\ninstead.",
            "line": " public/javascripts/text.js:121"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:31"
        },
        {
            "message": "Missing item type\nMaximum levels of nesting that will be included when an object is pretty-printed",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:37"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:42"
        },
        {
            "message": "Missing item type\nBy default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:47"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:126"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:226"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:271"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:275"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:279"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:284"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:293"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:307"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:323"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:342"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:361"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:381"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:437"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:455"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:465"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:485"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:503"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:516"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:530"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:540"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:551"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:563"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:575"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:587"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:607"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:646"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:651"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:659"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:713"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:793"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1013"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1044"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1173"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1250"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1258"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1267"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1276"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1285"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1295"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1304"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1311"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1318"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to NaN.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1336"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1344"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1352"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1374"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1377"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1401"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1426"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1429"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1446"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1455"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1473"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1487"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1664"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1760"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1795"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1801"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1805"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1809"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1813"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1823"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1834"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1842"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1849"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1875"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:1882"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2123"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2200"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2239"
        },
        {
            "message": "Missing item type",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2262"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2275"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2287"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2443"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " test/client/lib/jasmine-1.3.1/jasmine.js:2540"
        }
    ]
}
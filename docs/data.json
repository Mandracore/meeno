{
    "project": {
        "name": "Meeno source code documentation",
        "version": "0.2.5"
    },
    "files": {
        "public/javascripts/collections/filters.js": {
            "name": "public/javascripts/collections/filters.js",
            "modules": {},
            "classes": {
                "ObjectFilters": 1,
                "NoteFilters": 1,
                "TagFilters": 1,
                "TaskFilters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/notes.js": {
            "name": "public/javascripts/collections/notes.js",
            "modules": {},
            "classes": {
                "Notes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/tags.js": {
            "name": "public/javascripts/collections/tags.js",
            "modules": {},
            "classes": {
                "Tags": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/collections/tasks.js": {
            "name": "public/javascripts/collections/tasks.js",
            "modules": {},
            "classes": {
                "Tasks": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/lib/backbone-relational.js": {
            "name": "public/javascripts/lib/backbone-relational.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/lib/backbone.localStorage-min.js": {
            "name": "public/javascripts/lib/backbone.localStorage-min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/filter.js": {
            "name": "public/javascripts/models/filter.js",
            "modules": {},
            "classes": {
                "ObjectFilter": 1,
                "TagFilter": 1,
                "TaskFilter": 1,
                "NoteFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/link.js": {
            "name": "public/javascripts/models/link.js",
            "modules": {},
            "classes": {
                "NoteTask": 1,
                "NoteTag": 1,
                "TaskTag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/note.js": {
            "name": "public/javascripts/models/note.js",
            "modules": {},
            "classes": {
                "Note": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/models/task.js": {
            "name": "public/javascripts/models/task.js",
            "modules": {},
            "classes": {
                "Task": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-filter.js": {
            "name": "public/javascripts/views/browser-body-filter.js",
            "modules": {},
            "classes": {
                "BrowserBodyFilterView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-note.js": {
            "name": "public/javascripts/views/browser-body-note.js",
            "modules": {},
            "classes": {
                "BrowserBodyNoteView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-object.js": {
            "name": "public/javascripts/views/browser-body-object.js",
            "modules": {},
            "classes": {
                "BrowserBodyObjectView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-tag.js": {
            "name": "public/javascripts/views/browser-body-tag.js",
            "modules": {},
            "classes": {
                "BrowserBodyTagView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body-task.js": {
            "name": "public/javascripts/views/browser-body-task.js",
            "modules": {},
            "classes": {
                "BrowserBodyTaskView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-body.js": {
            "name": "public/javascripts/views/browser-body.js",
            "modules": {},
            "classes": {
                "BrowserBodyView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser-tab.js": {
            "name": "public/javascripts/views/browser-tab.js",
            "modules": {},
            "classes": {
                "BrowserTabView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/browser.js": {
            "name": "public/javascripts/views/browser.js",
            "modules": {},
            "classes": {
                "BrowserView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-body-object.js": {
            "name": "public/javascripts/views/editor-body-object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-body.js": {
            "name": "public/javascripts/views/editor-body.js",
            "modules": {},
            "classes": {
                "EditorBodyView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor-tab.js": {
            "name": "public/javascripts/views/editor-tab.js",
            "modules": {},
            "classes": {
                "EditorTabView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/editor.js": {
            "name": "public/javascripts/views/editor.js",
            "modules": {},
            "classes": {
                "EditorView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/views/main.js": {
            "name": "public/javascripts/views/main.js",
            "modules": {},
            "classes": {
                "MainView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/javascripts/text.js": {
            "name": "public/javascripts/text.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ObjectFilters": {
            "name": "ObjectFilters",
            "shortname": "ObjectFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/filters.js",
            "line": 8,
            "description": "Parent of the classes {{#crossLink \"NoteFilters\"}}{{/crossLink}}, {{#crossLink \"TaskFilters\"}}{{/crossLink}} and {{#crossLink \"TagFilters\"}}{{/crossLink}}.\nIt holds all the common methods necessary to deal with collections of filters.",
            "extends": "Backbone.Collection"
        },
        "NoteFilters": {
            "name": "NoteFilters",
            "shortname": "NoteFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/filters.js",
            "line": 25,
            "description": "This class defines a collection of {{#crossLink \"NoteFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "TagFilters": {
            "name": "TagFilters",
            "shortname": "TagFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/filters.js",
            "line": 36,
            "description": "This class defines a collection of {{#crossLink \"TagFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "TaskFilters": {
            "name": "TaskFilters",
            "shortname": "TaskFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/filters.js",
            "line": 47,
            "description": "This class defines a collection of {{#crossLink \"TaskFilter\"}}{{/crossLink}}s.",
            "extends": "ObjectFilters"
        },
        "Notes": {
            "name": "Notes",
            "shortname": "Notes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/notes.js",
            "line": 9,
            "description": "This class holds collections of notes",
            "extends": "Backbone.Collection"
        },
        "Tags": {
            "name": "Tags",
            "shortname": "Tags",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/tags.js",
            "line": 8,
            "description": "This class holds collections of tags",
            "extends": "Backbone.Collection"
        },
        "Tasks": {
            "name": "Tasks",
            "shortname": "Tasks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/collections/tasks.js",
            "line": 9,
            "description": "Holds a collection of tasks",
            "extends": "Backbone.Collection"
        },
        "ObjectFilter": {
            "name": "ObjectFilter",
            "shortname": "ObjectFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/filter.js",
            "line": 10,
            "description": "Parent of the classes {{#crossLink \"NoteFilter\"}}{{/crossLink}}, {{#crossLink \"TaskFilter\"}}{{/crossLink}} and {{#crossLink \"TagFilter\"}}{{/crossLink}}.\nIt holds all the common methods.",
            "extends": "Backbone.RelationalModel"
        },
        "TagFilter": {
            "name": "TagFilter",
            "shortname": "TagFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/filter.js",
            "line": 114,
            "description": "Used to filter collections of {{#crossLink \"Tag\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "TaskFilter": {
            "name": "TaskFilter",
            "shortname": "TaskFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/filter.js",
            "line": 132,
            "description": "Used to filter collections of {{#crossLink \"Task\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "NoteFilter": {
            "name": "NoteFilter",
            "shortname": "NoteFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/filter.js",
            "line": 155,
            "description": "Used to filter collections of {{#crossLink \"Note\"}}{{/crossLink}}s.",
            "extends": "ObjectFilter"
        },
        "NoteTask": {
            "name": "NoteTask",
            "shortname": "NoteTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/link.js",
            "line": 7,
            "description": "This class holds the model relating one note to one task",
            "extends": "Backbone.RelationalModel"
        },
        "NoteTag": {
            "name": "NoteTag",
            "shortname": "NoteTag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/link.js",
            "line": 17,
            "description": "This class holds the model relating one note to one tag",
            "extends": "Backbone.RelationalModel"
        },
        "TaskTag": {
            "name": "TaskTag",
            "shortname": "TaskTag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/link.js",
            "line": 27,
            "description": "This class holds the model relating one task to one tag",
            "extends": "Backbone.RelationalModel"
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/note.js",
            "line": 8,
            "description": "This class holds the note model",
            "extends": "Backbone.RelationalModel"
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/models/task.js",
            "line": 8,
            "description": "Holds the task model"
        },
        "BrowserBodyFilterView": {
            "name": "BrowserBodyFilterView",
            "shortname": "BrowserBodyFilterView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 8,
            "description": "This class holds the view of the filter models that are used to filter the browser's search results.\nThis view can accept models of classes {{#crossLink \"NoteFilter\"}}{{/crossLink}},\n{{#crossLink \"TaskFilter\"}}{{/crossLink}} and {{#crossLink \"TagFilter\"}}{{/crossLink}}.",
            "extends": "Backbone.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Holds all the options of the view.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filterName",
                            "description": "Must be passed to initialize the view's model name.",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "BrowserBodyNoteView": {
            "name": "BrowserBodyNoteView",
            "shortname": "BrowserBodyNoteView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body-note.js",
            "line": 10,
            "description": "Displays notes in the browser.",
            "extends": "BrowserBodyObjectView"
        },
        "BrowserBodyObjectView": {
            "name": "BrowserBodyObjectView",
            "shortname": "BrowserBodyObjectView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body-object.js",
            "line": 9,
            "description": "This class retains all core features for displaying objects views in the browser.\nSeveral classes will inherit from it, one per kind of business object :\n- BrowserBodyNoteView\n- BrowserBodyTaskView\n- BrowserBodyTagView\n- ...",
            "extends": "Backbone.View"
        },
        "BrowserBodyTagView": {
            "name": "BrowserBodyTagView",
            "shortname": "BrowserBodyTagView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 9,
            "description": "A backbone view to display one tag in the browser",
            "extends": "BrowserBodyObjectView"
        },
        "BrowserBodyTaskView": {
            "name": "BrowserBodyTaskView",
            "shortname": "BrowserBodyTaskView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 11,
            "description": "Displays a task in the browser",
            "extends": "{BrowserBodyObjectView}"
        },
        "BrowserBodyView": {
            "name": "BrowserBodyView",
            "shortname": "BrowserBodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-body.js",
            "line": 14,
            "description": "This class will be used to support the main view of the object browser.\nFrom here, the user will be able to browse notes, tags and tasks, using filters and sorting out results.\nIt controls the creation of several subviews, like {{#crossLink \"BrowserBodyTagView\"}}{{/crossLink}},\n{{#crossLink \"BrowserBodyFilterView\"}}{{/crossLink}},...",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "Holds a reference to the mother browser view",
                    "type": "Object"
                }
            ],
            "extends": "Backbone.View"
        },
        "BrowserTabView": {
            "name": "BrowserTabView",
            "shortname": "BrowserTabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser-tab.js",
            "line": 7,
            "description": "This backbone view holds the browser tab (simple button) controlling the display of the body rendered by {{#crossLink \"BrowserBodyView\"}}{{/crossLink}}",
            "extends": "Backbone.View"
        },
        "BrowserView": {
            "name": "BrowserView",
            "shortname": "BrowserView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/browser.js",
            "line": 9,
            "description": "This class is mainly a proxy for two subclasses : {{#crossLink \"BrowserTabView\"}}{{/crossLink}} and {{#crossLink \"BrowserBodyView\"}}{{/crossLink}}.\nIt listens to the event tab:toggle:browser and make the two subviews visible.",
            "is_constructor": 1
        },
        "EditorBodyView": {
            "name": "EditorBodyView",
            "shortname": "EditorBodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/editor-body.js",
            "line": 12,
            "description": "This backbone view holds the body of a note editor (where the note is actually rendered)",
            "extends": "Backbone.View"
        },
        "EditorTabView": {
            "name": "EditorTabView",
            "shortname": "EditorTabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/editor-tab.js",
            "line": 6,
            "description": "This backbone view holds the editor tab (simple button) controlling the display of the body rendered by {{#crossLink \"EditorBodyView\"}}{{/crossLink}}",
            "extends": "Backbone.View"
        },
        "EditorView": {
            "name": "EditorView",
            "shortname": "EditorView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/editor.js",
            "line": 12,
            "description": "This backbone view holds the note editor",
            "extends": "Backbone.View"
        },
        "MainView": {
            "name": "MainView",
            "shortname": "MainView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/javascripts/views/main.js",
            "line": 13,
            "description": "This backbone view holds the entire UI.",
            "extends": "Backbone.View"
        }
    },
    "classitems": [
        {
            "file": "public/javascripts/collections/tags.js",
            "line": 19,
            "description": "Allows to search through a collection of tags based on full-text search (in label)",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "filter",
                    "description": "the filter used to search the collection",
                    "type": "TagFilter"
                }
            ],
            "return": {
                "description": "a new filtered collection of tags",
                "type": "Tags"
            },
            "chainable": 1,
            "class": "Tags"
        },
        {
            "file": "public/javascripts/collections/tasks.js",
            "line": 20,
            "description": "Allows to search through a collection of tasks with a complex filter based on full-text search (in label)\nand on tags related or not to the models",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "filter",
                    "description": "the filter used to search the collection",
                    "type": "TaskFilter"
                }
            ],
            "return": {
                "description": "a new filtered collection of tasks",
                "type": "Tasks"
            },
            "chainable": 1,
            "class": "Tasks"
        },
        {
            "file": "public/javascripts/collections/tasks.js",
            "line": 52,
            "description": "When moving a task to a new position, shift the following ones down to make some room for it.\nAlso needs to be called when a new task is appended to a collection.",
            "itemtype": "method",
            "name": "shiftDown",
            "params": [
                {
                    "name": "anchor",
                    "description": "the task that was moved, point of reference",
                    "type": "Task"
                }
            ],
            "class": "Tasks"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 2,
            "description": "Backbone-relational.js 0.7.0\n(c) 2011-2013 Paul Uithol\n\nBackbone-relational may be freely distributed under the MIT license; see the accompanying LICENSE.txt.\nFor details and documentation: https://github.com/PaulUithol/Backbone-relational.\nDepends on Backbone (and thus on Underscore as well): https://github.com/documentcloud/backbone.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 13,
            "description": "CommonJS shim",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 32,
            "description": "Semaphore mixin; can be used as both binary and counting.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 69,
            "description": "A BlockingQueue that accumulates items while blocked (via 'block'),\nand processes them when unblocked (via 'unblock').\nProcess can also be called manually (via 'process').",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 110,
            "description": "Global event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'update:<key>')\nuntil the top-level object is fully initialized (see 'Backbone.RelationalModel').",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 116,
            "description": "Backbone.Store keeps track of all created (and destruction of) Backbone.RelationalModel.\nHandles lookup for relations.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 131,
            "description": "Add a set of subModelTypes to the store, that can be used to resolve the '_superModel'\nfor a model later in 'setupSuperModel'.",
            "params": [
                {
                    "name": "subModelTypes",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                },
                {
                    "name": "superModelType",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 145,
            "description": "Check if the given modelType is registered as another model's subModel. If so, add it to the super model's\n'_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.",
            "params": [
                {
                    "name": "modelType",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 170,
            "description": "Add a reverse relation. Is added to the 'relations' property on model's prototype, and to\nexisting instances of 'model' in the store as well.",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "model",
                            "description": "",
                            "type": "Backbone.RelationalModel"
                        },
                        {
                            "name": "type",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "relatedModel",
                            "description": "",
                            "type": "String|Object"
                        }
                    ]
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 206,
            "description": "Add a 'relation' to all existing instances of 'relation.model' in the store",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 221,
            "description": "Find the Store's collection for a certain type of model.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "return": {
                "description": "A collection if found (or applicable for 'model'), or null",
                "type": "Backbone.Collection"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 247,
            "description": "Find a type on the global object by name. Splits name on dots.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 288,
            "description": "Find the attribute that is to be used as the `id` on a given object",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String|Number|Object|Backbone.RelationalModel"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 314,
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String|Number|Object|Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 336,
            "description": "Add a 'model' to it's appropriate collection. Retain the original contents of 'model.collection'.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 355,
            "description": "Explicitly update a model's id in it's store collection",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 364,
            "description": "Remove a 'model' from the store.",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 376,
            "description": "The main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\nare used to regulate addition and removal of models from relations.",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "Backbone.RelationalModel"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "relatedModel",
                            "description": "",
                            "type": "Backbone.RelationalModel.constructor"
                        },
                        {
                            "name": "includeInJSON",
                            "description": "Serialize the given attribute for related model(s)' in toJSON, or just their ids.",
                            "type": "Boolean|String",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "createModels",
                            "description": "Create objects from the contents of keys if the object is not found in Backbone.store.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "reverseRelation",
                            "description": "Specify a bi-directional relation. If provided, Relation will reciprocate\n   the relation to the 'relatedModel'. Required and optional properties match 'options', except that it also needs\n   {Backbone.Relation|String} type ('HasOne' or 'HasMany').",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 494,
            "description": "Check several pre-conditions.",
            "return": {
                "description": "True if pre-conditions are satisfied, false if they're not.",
                "type": "Boolean"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 543,
            "description": "Set the related model(s) for this relation",
            "params": [
                {
                    "name": "related",
                    "description": "",
                    "type": "Backbone.Model|Backbone.Collection"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 556,
            "description": "Determine if a relation (on a different RelationalModel) is the reverse\nrelation of the current one.",
            "params": [
                {
                    "name": "relation",
                    "description": "",
                    "type": "Backbone.Relation"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 570,
            "description": "Get the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).",
            "params": [
                {
                    "name": "model",
                    "description": "Get the reverse relations for a specific model.\n   If not specified, 'this.related' is used.",
                    "type": "Backbone.RelationalModel",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.Relation[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 591,
            "description": "Rename options.silent to options.silentChange, so events propagate properly.\n(for example in HasMany, from 'addRelated'->'handleAddition')",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 606,
            "description": "Rename options.silentChange to options.silent, so events are silenced as intended in Backbone's\noriginal functions.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 669,
            "description": "If the key is changed, notify old & new reverse relations and initialize the new relation",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 726,
            "description": "If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 805,
            "description": "Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\nIf no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.",
            "params": [
                {
                    "name": "collection",
                    "description": "",
                    "type": "Backbone.Collection",
                    "optional": true
                }
            ],
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 880,
            "description": "If the key is changed, notify old & new reverse relations and initialize the new relation",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 953,
            "description": "When a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', must set 'this.instance' as their related).",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 978,
            "description": "When a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', which should be nullified)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1027,
            "description": "A type of Backbone.Model that also maintains relations to other models and collections.\nNew events when compared to the original:\n - 'add:<key>' (model, related collection, options)\n - 'remove:<key>' (model, related collection, options)\n - 'update:<key>' (model, related model or collection, options)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1081,
            "description": "Override 'trigger' to queue 'change' and 'change:*' events",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1098,
            "description": "Initialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\nInvoked in the first call so 'set' (which is made from the Backbone.Model constructor).",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1121,
            "description": "When new values are set, notify this model's relations (also if options.silent is set).\n(Relation.setRelated locks this model before calling 'set' on it to prevent loops)",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1137,
            "description": "Either add to the queue (if we're not initialized yet), or execute right away.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1144,
            "description": "Process _queue",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1153,
            "description": "Get a specific relation.",
            "params": [
                {
                    "name": "key",
                    "description": "The relation key to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An instance of 'Backbone.Relation', if a relation was found for 'key', or null.",
                "type": "Backbone.Relation"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1166,
            "description": "Get all of the created relations.",
            "return": {
                "description": "",
                "type": "Backbone.Relation[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1174,
            "description": "Retrieve related objects.",
            "params": [
                {
                    "name": "key",
                    "description": "The relation key to fetch models for.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for 'Backbone.Model.fetch' and 'Backbone.sync'.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "update",
                    "description": "Whether to force a fetch from the server (updating existing models).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An array of request objects",
                "type": "jQuery.when[]"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1317,
            "description": "Override 'change', so the change will only execute after 'set' has finised (relations are updated),\nand 'previousAttributes' will be available when the event is fired.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1341,
            "description": "Convert relations to JSON, omits them when required",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1442,
            "description": "The related model might not be defined for two reasons\n 1. it never gets defined, e.g. a typo\n 2. it is related to itself\nIn neither of these cases do we need to pre-initialize reverse relations.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1462,
            "description": "Create a 'Backbone.Model' instance based on 'attributes'.",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.Model"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1522,
            "description": "Find an instance of `this` type in 'Backbone.Relational.store'.\n- If `attributes` is a string or a number, `findOrCreate` will just query the `store` and return a model if found.\n- If `attributes` is an object, the model will be updated with `attributes` if found.\n  Otherwise, a new model is created with `attributes` (unless `options.create` is explicitly set to `false`).",
            "params": [
                {
                    "name": "attributes",
                    "description": "Either a model's id, or the attributes used to create or update a model.",
                    "type": "Object|String|Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "create",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Backbone.RelationalModel"
            },
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1553,
            "description": "Override Backbone.Collection._prepareModel, so objects will be built using the correct type\nif the collection.model has subModels.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1587,
            "description": "Override Backbone.Collection.add, so objects fetched from the server multiple times will\nupdate the existing Model. Also, trigger 'relational:add'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1625,
            "description": "Override 'Backbone.Collection.remove' to trigger 'relational:remove'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1651,
            "description": "Override 'Backbone.Collection.reset' to trigger 'relational:reset'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1662,
            "description": "Override 'Backbone.Collection.sort' to trigger 'relational:reset'.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone-relational.js",
            "line": 1673,
            "description": "Override 'Backbone.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\nare ready.",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/lib/backbone.localStorage-min.js",
            "line": 1,
            "description": "Backbone localStorage Adapter\nhttps://github.com/jeromegn/Backbone.localStorage\n/(function(){function n(){return((1+Math.random())*65536|0).toString(16).substring(1)}function r(){return n()+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+n()+n()}var e=this._,t=this.Backbone;t.LocalStorage=window.Store=function(e){this.name=e;var t=this.localStorage().getItem(this.name);this.records=t&&t.split(\",\")||[]},e.extend(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(\",\"))},create:function(e){return e.id||(e.id=r(),e.set(e.idAttribute,e.id)),this.localStorage().setItem(this.name+\"-\"+e.id,JSON.stringify(e)),this.records.push(e.id.toString()),this.save(),e.toJSON()},update:function(t){return this.localStorage().setItem(this.name+\"-\"+t.id,JSON.stringify(t)),e.include(this.records,t.id.toString())||this.records.push(t.id.toString()),this.save(),t.toJSON()},find:function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e.id))},findAll:function(){return e(this.records).chain().map(function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e))},this).compact().value()},destroy:function(t){return this.localStorage().removeItem(this.name+\"-\"+t.id),this.records=e.reject(this.records,function(e){return e==t.id.toString()}),this.save(),t},localStorage:function(){return localStorage}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(e,t,n,r){var i=t.localStorage||t.collection.localStorage;typeof n==\"function\"&&(n={success:n,error:r});var s,o=$.Deferred&&$.Deferred();switch(e){case\"read\":s=t.id!=undefined?i.find(t):i.findAll();break;case\"create\":s=i.create(t);break;case\"update\":s=i.update(t);break;case\"delete\":s=i.destroy(t)}return s?(n.success(s),o&&o.resolve()):(n.error(\"Record not found\"),o&&o.reject()),o&&o.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(e){return e.localStorage||e.collection&&e.collection.localStorage?t.LocalStorage.sync:t.ajaxSync},t.sync=function(e,n,r,i){return t.getSyncMethod(n).apply(this,[e,n,r,i])}})();",
            "class": "ObjectFilter"
        },
        {
            "file": "public/javascripts/models/task.js",
            "line": 33,
            "description": "This method overrides the one provided by Backbone so that the attribute cid is also included in the json output\nThis is necessary for decoupling testing from database : we need unique IDs in unit testing but we don't \nwant to rely on a database layer",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "all the attributes of the model put in a json object",
                "type": "Json"
            },
            "class": "Task"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 35,
            "description": "Renders one filter : generates the HTML and appends it to the DOM element of the view",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 47,
            "description": "Called every time the filters of the {{#crossLink \"BrowserBodyView\"}}browser{{/crossLink}} \nare updated. Checks if its model is similar to the one in use in the browser and \nhighlights it if it's true.",
            "itemtype": "method",
            "name": "checkStatus",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 64,
            "description": "Called when the user clicks on the view.\nUpdates the right {{#crossLink \"BrowserBodyView\"}}browser{{/crossLink}}'s \nfilter to clone the view's model properties and highlights it.",
            "itemtype": "method",
            "name": "activate",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-filter.js",
            "line": 77,
            "description": "Will destroy both the view and its model if it is currently active.",
            "itemtype": "method",
            "name": "removeIfActive",
            "class": "BrowserBodyFilterView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 27,
            "description": "Renders one tag : generates the HTML and appends it to the DOM element of the view",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 38,
            "description": "Event triggered on `channel` when this.render() method is called",
            "itemtype": "event",
            "name": "browser:tags:reSyncSelectors",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 46,
            "description": "Displays an input to edit the tag label",
            "itemtype": "method",
            "name": "edit",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 57,
            "description": "Sets the view's model label to the input (`span.label`) value and saves the model",
            "itemtype": "method",
            "name": "save",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-tag.js",
            "line": 77,
            "description": "Will destroy the view's model and the view itself when the user clics on `.delete` class DOM element",
            "itemtype": "method",
            "name": "delete",
            "class": "BrowserBodyTagView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 32,
            "itemtype": "method",
            "name": "initialize",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 39,
            "description": "This method aims at rendering the HTML elements for a given task model.\nOnce it is appended to the DOM, some event bindings are also done.\nIn particular, we control the events occuring when the ENTER key is pressed,\nso that the browser does not try to submit the form by faking a click event on\nthe closest button (which triggers unwanted behaviours).",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 90,
            "itemtype": "method",
            "name": "edit",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 99,
            "description": "Updates the view after the user modified the tags related to the task",
            "itemtype": "method",
            "name": "renderTagUpdate",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 111,
            "description": "When the user tries to link the task to a new tag, this method will create the desired tag \nand link it to the view's model.",
            "itemtype": "method",
            "name": "addNewTag",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 146,
            "description": "Should initialize the task's tag autocomplete input and allow for linking existing tags\nto the task.\nTo be called only when a task is being edited, and deleted when its form is closed",
            "itemtype": "method",
            "name": "initAutocomplete",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 181,
            "description": "Saves the changes made into the database",
            "itemtype": "method",
            "name": "update",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 194,
            "description": "Should unlink the clicked tag from the task",
            "itemtype": "method",
            "name": "unlink",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 209,
            "description": "Will reset the model to the value stored in DB and re-render the view accordingly.",
            "itemtype": "method",
            "name": "reset",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 223,
            "description": "To remove the view's model from database and kill the view.",
            "itemtype": "method",
            "name": "delete",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body-task.js",
            "line": 233,
            "description": "To close the task form",
            "itemtype": "method",
            "name": "close",
            "class": "BrowserBodyTaskView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 124,
            "description": "Makes the browser visible",
            "itemtype": "method",
            "name": "toggle",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 138,
            "description": "Displays the adequate subsection of the browser (notes, tags or tasks) when the user clicks\non the right button (class `.filter li`).",
            "itemtype": "method",
            "name": "toggleObject",
            "params": [
                {
                    "name": "event",
                    "description": "Backbone event",
                    "type": "Event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 164,
            "description": "Manages the buttons \"select all\" and \"unselect all\". Will be called every time an object\nis selected or unseleted to make sure that the right buttons are displayed",
            "itemtype": "method",
            "name": "actionSelectorsUpdate",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 189,
            "description": "Should select all objects",
            "itemtype": "method",
            "name": "actionSelectAll",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 202,
            "description": "Should unselect all objects",
            "itemtype": "method",
            "name": "actionUnSelectAll",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 215,
            "description": "Displays or hides the controls necessary to select/unselect all objects, delete them,...\nThrows an event to make subviews display their checkboxes",
            "itemtype": "method",
            "name": "actionDeleteToggle",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 231,
            "description": "To make objects subviews show/hide their checkbox.",
            "itemtype": "event",
            "name": "browser:actions:toggle-checkboxes:[collName]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 242,
            "description": "Triggers an event, which will be heard by sub-views that will actually execute the action",
            "itemtype": "method",
            "name": "actionDeleteExecute",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 252,
            "description": "To make objects subviews kill themselves and destroy their model if they are selected.",
            "itemtype": "event",
            "name": "browser:actions:delete:[collName]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 269,
            "description": "Checks whether the user is currently using a search input and if so tells which collection is visible",
            "itemtype": "method",
            "name": "searchGetFocus",
            "return": {
                "description": "Returns the name of the collection studied (example : `notes`) or `false` if no search input has focus",
                "type": "Object"
            },
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 287,
            "description": "Will prepare and open an autocomplete input.\nIt should help the user selecting objects from collection named `sColl2` (example : `tags`) \nthat will then be used to filter the objects from collection named `sColl1`",
            "itemtype": "method",
            "name": "searchOpenAutocomplete",
            "params": [
                {
                    "name": "sColl2",
                    "description": "the name of the collection (example : `tags`) used to filter the collection currently displayed in browser"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 338,
            "description": "Controls what happens when the user tries to close the autocomplete",
            "itemtype": "method",
            "name": "searchCloseAutocomplete",
            "params": [
                {
                    "name": "event",
                    "description": "the keyboard event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 356,
            "description": "Allows to remove from current filter the object that has been clicked on",
            "itemtype": "method",
            "name": "searchObjectRemove",
            "params": [
                {
                    "name": "event",
                    "description": "the click event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 371,
            "description": "Updates current filter with the text typed in by the user",
            "itemtype": "method",
            "name": "searchText",
            "params": [
                {
                    "name": "event",
                    "description": "the keyboard event"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 386,
            "description": "Should update the controls to save/delete filters\nIf temp contains a filter similar to the one that is currently applied, we propose to delete it\nIf not, we propose to save the currently applied one",
            "itemtype": "method",
            "name": "searchFiltersCtrlUpd",
            "params": [
                {
                    "name": "collName",
                    "description": "the name of the collection (example : `tags`)",
                    "type": "String"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 410,
            "description": "Displays the controls necessary to save a filter",
            "itemtype": "method",
            "name": "searchFilterSave1",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 423,
            "description": "Saves the new filter with the chosen name and hides the controls",
            "itemtype": "method",
            "name": "searchFilterSave2",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 443,
            "description": "Sends an event to make the filter view holding the active filter destroy its model",
            "itemtype": "method",
            "name": "searchFilterDelete",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 452,
            "description": "Will make the view holding the active filter destroy its model",
            "itemtype": "event",
            "name": "browser:search:filters:remove:[filter-name]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 459,
            "description": "Renders all the filters stored in the temp storage.",
            "itemtype": "method",
            "name": "searchRenderFilters",
            "params": [
                {
                    "name": "filtersCollName",
                    "description": ""
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 489,
            "description": "Forces the view's current filter to match the one clicked by the user",
            "itemtype": "method",
            "name": "searchRenderFilterSuper",
            "params": [
                {
                    "name": "filter",
                    "description": "the model held by the filter view clicked on by the user"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 532,
            "description": "Forces the view's current filter to match the one clicked by the user",
            "itemtype": "method",
            "name": "searchFilterActivate",
            "params": [
                {
                    "name": "filter",
                    "description": "the model held by the filter view clicked on by the user"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 543,
            "description": "This event is listened by filter views to make them check\nif they are active",
            "itemtype": "event",
            "name": "browser:search:filters:check-status:[filter-name]",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 555,
            "itemtype": "method",
            "name": "render",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 564,
            "itemtype": "method",
            "name": "renderCollection",
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/browser-body.js",
            "line": 605,
            "description": "This methods aims at saving the new positions of the objects",
            "itemtype": "method",
            "name": "sortableUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "http://api.jqueryui.com/sortable/#event-update the event triggered by jQuery",
                    "type": "JQuery event"
                },
                {
                    "name": "ui",
                    "description": "http://api.jqueryui.com/sortable/#event-update the ui object that is sortable",
                    "type": "JQuery ui"
                }
            ],
            "class": "BrowserBodyView"
        },
        {
            "file": "public/javascripts/views/editor-body-object.js",
            "line": 56,
            "description": "Filters the keyboard events to pass only ENTER and TAB to the lock() method",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event",
                    "type": "Keyboard event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorBodyView"
        },
        {
            "file": "public/javascripts/views/editor-body-object.js",
            "line": 100,
            "description": "Triggered once the user finishes typing in the new object.\nUsed as a proxy to either link the note to a new object, or to create a new object",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event",
                    "type": "Keyboard event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorBodyView"
        },
        {
            "file": "public/javascripts/text.js",
            "line": 1,
            "license": "RequireJS text 2.0.12 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/requirejs/text for details",
            "class": ""
        },
        {
            "file": "public/javascripts/text.js",
            "line": 77,
            "description": "Parses a resource name into its component parts. Resource names\nlook like: module/name.ext!strip, where the !strip part is\noptional.",
            "params": [
                {
                    "name": "name",
                    "description": "the resource name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with properties \"moduleName\", \"ext\" and \"strip\"\nwhere strip is a boolean.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "public/javascripts/text.js",
            "line": 121,
            "description": "Is an URL on another domain. Only works for browser use, returns\nfalse in non-browser environments. Only used to know if an\noptimized .js version of a text resource should be loaded\ninstead.",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " public/javascripts/text.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/javascripts/text.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/javascripts/text.js:121"
        },
        {
            "message": "Missing item type\nBackbone-relational.js 0.7.0\n(c) 2011-2013 Paul Uithol\n\nBackbone-relational may be freely distributed under the MIT license; see the accompanying LICENSE.txt.\nFor details and documentation: https://github.com/PaulUithol/Backbone-relational.\nDepends on Backbone (and thus on Underscore as well): https://github.com/documentcloud/backbone.",
            "line": " public/javascripts/lib/backbone-relational.js:2"
        },
        {
            "message": "Missing item type\nCommonJS shim",
            "line": " public/javascripts/lib/backbone-relational.js:13"
        },
        {
            "message": "Missing item type\nSemaphore mixin; can be used as both binary and counting.",
            "line": " public/javascripts/lib/backbone-relational.js:32"
        },
        {
            "message": "Missing item type\nA BlockingQueue that accumulates items while blocked (via 'block'),\nand processes them when unblocked (via 'unblock').\nProcess can also be called manually (via 'process').",
            "line": " public/javascripts/lib/backbone-relational.js:69"
        },
        {
            "message": "Missing item type\nGlobal event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'update:<key>')\nuntil the top-level object is fully initialized (see 'Backbone.RelationalModel').",
            "line": " public/javascripts/lib/backbone-relational.js:110"
        },
        {
            "message": "Missing item type\nBackbone.Store keeps track of all created (and destruction of) Backbone.RelationalModel.\nHandles lookup for relations.",
            "line": " public/javascripts/lib/backbone-relational.js:116"
        },
        {
            "message": "Missing item type\nAdd a set of subModelTypes to the store, that can be used to resolve the '_superModel'\nfor a model later in 'setupSuperModel'.",
            "line": " public/javascripts/lib/backbone-relational.js:131"
        },
        {
            "message": "Missing item type\nCheck if the given modelType is registered as another model's subModel. If so, add it to the super model's\n'_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.",
            "line": " public/javascripts/lib/backbone-relational.js:145"
        },
        {
            "message": "Missing item type\nAdd a reverse relation. Is added to the 'relations' property on model's prototype, and to\nexisting instances of 'model' in the store as well.",
            "line": " public/javascripts/lib/backbone-relational.js:170"
        },
        {
            "message": "Missing item type\nAdd a 'relation' to all existing instances of 'relation.model' in the store",
            "line": " public/javascripts/lib/backbone-relational.js:206"
        },
        {
            "message": "Missing item type\nFind the Store's collection for a certain type of model.",
            "line": " public/javascripts/lib/backbone-relational.js:221"
        },
        {
            "message": "Missing item type\nFind a type on the global object by name. Splits name on dots.",
            "line": " public/javascripts/lib/backbone-relational.js:247"
        },
        {
            "message": "Missing item type\nFind the attribute that is to be used as the `id` on a given object",
            "line": " public/javascripts/lib/backbone-relational.js:288"
        },
        {
            "message": "Missing item type",
            "line": " public/javascripts/lib/backbone-relational.js:314"
        },
        {
            "message": "Missing item type\nAdd a 'model' to it's appropriate collection. Retain the original contents of 'model.collection'.",
            "line": " public/javascripts/lib/backbone-relational.js:336"
        },
        {
            "message": "Missing item type\nExplicitly update a model's id in it's store collection",
            "line": " public/javascripts/lib/backbone-relational.js:355"
        },
        {
            "message": "Missing item type\nRemove a 'model' from the store.",
            "line": " public/javascripts/lib/backbone-relational.js:364"
        },
        {
            "message": "Missing item type\nThe main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\nare used to regulate addition and removal of models from relations.",
            "line": " public/javascripts/lib/backbone-relational.js:376"
        },
        {
            "message": "Missing item type\nCheck several pre-conditions.",
            "line": " public/javascripts/lib/backbone-relational.js:494"
        },
        {
            "message": "Missing item type\nSet the related model(s) for this relation",
            "line": " public/javascripts/lib/backbone-relational.js:543"
        },
        {
            "message": "Missing item type\nDetermine if a relation (on a different RelationalModel) is the reverse\nrelation of the current one.",
            "line": " public/javascripts/lib/backbone-relational.js:556"
        },
        {
            "message": "Missing item type\nGet the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).",
            "line": " public/javascripts/lib/backbone-relational.js:570"
        },
        {
            "message": "Missing item type\nRename options.silent to options.silentChange, so events propagate properly.\n(for example in HasMany, from 'addRelated'->'handleAddition')",
            "line": " public/javascripts/lib/backbone-relational.js:591"
        },
        {
            "message": "Missing item type\nRename options.silentChange to options.silent, so events are silenced as intended in Backbone's\noriginal functions.",
            "line": " public/javascripts/lib/backbone-relational.js:606"
        },
        {
            "message": "Missing item type\nIf the key is changed, notify old & new reverse relations and initialize the new relation",
            "line": " public/javascripts/lib/backbone-relational.js:669"
        },
        {
            "message": "Missing item type\nIf a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'",
            "line": " public/javascripts/lib/backbone-relational.js:726"
        },
        {
            "message": "Missing item type\nBind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\nIf no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.",
            "line": " public/javascripts/lib/backbone-relational.js:805"
        },
        {
            "message": "Missing item type\nIf the key is changed, notify old & new reverse relations and initialize the new relation",
            "line": " public/javascripts/lib/backbone-relational.js:880"
        },
        {
            "message": "Missing item type\nWhen a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', must set 'this.instance' as their related).",
            "line": " public/javascripts/lib/backbone-relational.js:953"
        },
        {
            "message": "Missing item type\nWhen a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n(should be 'HasOne', which should be nullified)",
            "line": " public/javascripts/lib/backbone-relational.js:978"
        },
        {
            "message": "Missing item type\nA type of Backbone.Model that also maintains relations to other models and collections.\nNew events when compared to the original:\n - 'add:<key>' (model, related collection, options)\n - 'remove:<key>' (model, related collection, options)\n - 'update:<key>' (model, related model or collection, options)",
            "line": " public/javascripts/lib/backbone-relational.js:1027"
        },
        {
            "message": "Missing item type\nOverride 'trigger' to queue 'change' and 'change:*' events",
            "line": " public/javascripts/lib/backbone-relational.js:1081"
        },
        {
            "message": "Missing item type\nInitialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\nInvoked in the first call so 'set' (which is made from the Backbone.Model constructor).",
            "line": " public/javascripts/lib/backbone-relational.js:1098"
        },
        {
            "message": "Missing item type\nWhen new values are set, notify this model's relations (also if options.silent is set).\n(Relation.setRelated locks this model before calling 'set' on it to prevent loops)",
            "line": " public/javascripts/lib/backbone-relational.js:1121"
        },
        {
            "message": "Missing item type\nEither add to the queue (if we're not initialized yet), or execute right away.",
            "line": " public/javascripts/lib/backbone-relational.js:1137"
        },
        {
            "message": "Missing item type\nProcess _queue",
            "line": " public/javascripts/lib/backbone-relational.js:1144"
        },
        {
            "message": "Missing item type\nGet a specific relation.",
            "line": " public/javascripts/lib/backbone-relational.js:1153"
        },
        {
            "message": "Missing item type\nGet all of the created relations.",
            "line": " public/javascripts/lib/backbone-relational.js:1166"
        },
        {
            "message": "Missing item type\nRetrieve related objects.",
            "line": " public/javascripts/lib/backbone-relational.js:1174"
        },
        {
            "message": "Missing item type\nOverride 'change', so the change will only execute after 'set' has finised (relations are updated),\nand 'previousAttributes' will be available when the event is fired.",
            "line": " public/javascripts/lib/backbone-relational.js:1317"
        },
        {
            "message": "Missing item type\nConvert relations to JSON, omits them when required",
            "line": " public/javascripts/lib/backbone-relational.js:1341"
        },
        {
            "message": "Missing item type\nThe related model might not be defined for two reasons\n 1. it never gets defined, e.g. a typo\n 2. it is related to itself\nIn neither of these cases do we need to pre-initialize reverse relations.",
            "line": " public/javascripts/lib/backbone-relational.js:1442"
        },
        {
            "message": "Missing item type\nCreate a 'Backbone.Model' instance based on 'attributes'.",
            "line": " public/javascripts/lib/backbone-relational.js:1462"
        },
        {
            "message": "Missing item type\nFind an instance of `this` type in 'Backbone.Relational.store'.\n- If `attributes` is a string or a number, `findOrCreate` will just query the `store` and return a model if found.\n- If `attributes` is an object, the model will be updated with `attributes` if found.\n  Otherwise, a new model is created with `attributes` (unless `options.create` is explicitly set to `false`).",
            "line": " public/javascripts/lib/backbone-relational.js:1522"
        },
        {
            "message": "Missing item type\nOverride Backbone.Collection._prepareModel, so objects will be built using the correct type\nif the collection.model has subModels.",
            "line": " public/javascripts/lib/backbone-relational.js:1553"
        },
        {
            "message": "Missing item type\nOverride Backbone.Collection.add, so objects fetched from the server multiple times will\nupdate the existing Model. Also, trigger 'relational:add'.",
            "line": " public/javascripts/lib/backbone-relational.js:1587"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.remove' to trigger 'relational:remove'.",
            "line": " public/javascripts/lib/backbone-relational.js:1625"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.reset' to trigger 'relational:reset'.",
            "line": " public/javascripts/lib/backbone-relational.js:1651"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.sort' to trigger 'relational:reset'.",
            "line": " public/javascripts/lib/backbone-relational.js:1662"
        },
        {
            "message": "Missing item type\nOverride 'Backbone.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\nare ready.",
            "line": " public/javascripts/lib/backbone-relational.js:1673"
        },
        {
            "message": "Missing item type\nBackbone localStorage Adapter\nhttps://github.com/jeromegn/Backbone.localStorage\n/(function(){function n(){return((1+Math.random())*65536|0).toString(16).substring(1)}function r(){return n()+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+\"-\"+n()+n()+n()}var e=this._,t=this.Backbone;t.LocalStorage=window.Store=function(e){this.name=e;var t=this.localStorage().getItem(this.name);this.records=t&&t.split(\",\")||[]},e.extend(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(\",\"))},create:function(e){return e.id||(e.id=r(),e.set(e.idAttribute,e.id)),this.localStorage().setItem(this.name+\"-\"+e.id,JSON.stringify(e)),this.records.push(e.id.toString()),this.save(),e.toJSON()},update:function(t){return this.localStorage().setItem(this.name+\"-\"+t.id,JSON.stringify(t)),e.include(this.records,t.id.toString())||this.records.push(t.id.toString()),this.save(),t.toJSON()},find:function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e.id))},findAll:function(){return e(this.records).chain().map(function(e){return JSON.parse(this.localStorage().getItem(this.name+\"-\"+e))},this).compact().value()},destroy:function(t){return this.localStorage().removeItem(this.name+\"-\"+t.id),this.records=e.reject(this.records,function(e){return e==t.id.toString()}),this.save(),t},localStorage:function(){return localStorage}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(e,t,n,r){var i=t.localStorage||t.collection.localStorage;typeof n==\"function\"&&(n={success:n,error:r});var s,o=$.Deferred&&$.Deferred();switch(e){case\"read\":s=t.id!=undefined?i.find(t):i.findAll();break;case\"create\":s=i.create(t);break;case\"update\":s=i.update(t);break;case\"delete\":s=i.destroy(t)}return s?(n.success(s),o&&o.resolve()):(n.error(\"Record not found\"),o&&o.reject()),o&&o.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(e){return e.localStorage||e.collection&&e.collection.localStorage?t.LocalStorage.sync:t.ajaxSync},t.sync=function(e,n,r,i){return t.getSyncMethod(n).apply(this,[e,n,r,i])}})();",
            "line": " public/javascripts/lib/backbone.localStorage-min.js:1"
        },
        {
            "message": "Missing item type\nFilters the keyboard events to pass only ENTER and TAB to the lock() method",
            "line": " public/javascripts/views/editor-body-object.js:56"
        },
        {
            "message": "Missing item type\nTriggered once the user finishes typing in the new object.\nUsed as a proxy to either link the note to a new object, or to create a new object",
            "line": " public/javascripts/views/editor-body-object.js:100"
        },
        {
            "message": "Missing item type",
            "line": " public/javascripts/text.js:1"
        },
        {
            "message": "Missing item type\nParses a resource name into its component parts. Resource names\nlook like: module/name.ext!strip, where the !strip part is\noptional.",
            "line": " public/javascripts/text.js:77"
        },
        {
            "message": "Missing item type\nIs an URL on another domain. Only works for browser use, returns\nfalse in non-browser environments. Only used to know if an\noptimized .js version of a text resource should be loaded\ninstead.",
            "line": " public/javascripts/text.js:121"
        }
    ]
}
diff --git a/app/src/models/index.js b/app/src/models/index.js
index 776c504..674b6f0 100644
--- a/app/src/models/index.js
+++ b/app/src/models/index.js
@@ -4,14 +4,22 @@
 
 module.exports = function(mas, mongoose){
 
-	// This sub-document of msNote will be saved through it, no need for dedicated api
+	// This sub-document of msNote will be stored within its parent
 	var msLinkNoteTag = new mongoose.Schema({
-		tag  : { type: mongoose.Schema.Types.ObjectId, ref: 'Tag' }, // Linked document is Tag
-		note : { type: mongoose.Schema.Types.ObjectId, ref: 'Note' } // Linked document is Note
+		note : { type: mongoose.Schema.Types.ObjectId, ref: 'Note' },
+		tag  : { type: mongoose.Schema.Types.ObjectId, ref: 'Tag' },
 	});
+
+	// This sub-document of msNote will be stored within its parent
 	var msLinkNoteTask = new mongoose.Schema({
-		task : { type: mongoose.Schema.Types.ObjectId, ref: 'Task' }, // Linked document is Task
-		note : { type: mongoose.Schema.Types.ObjectId, ref: 'Note' } // Linked document is Note
+		note : { type: mongoose.Schema.Types.ObjectId, ref: 'Note' },
+		task : { type: mongoose.Schema.Types.ObjectId, ref: 'Task' },
+	});
+
+	// This sub-document of msTask will be stored within its parent
+	var msLinkTaskTag = new mongoose.Schema({
+		task : { type: mongoose.Schema.Types.ObjectId, ref: 'Task' },
+		tag : { type: mongoose.Schema.Types.ObjectId, ref: 'Tag' },
 	});
 
 	var msNote = new mongoose.Schema({
@@ -31,18 +39,20 @@ module.exports = function(mas, mongoose){
 		role       : { type: String, default: "user" }
 	});
 	var msTag = new mongoose.Schema({
+		_creator  : String,
+		created_at: { type: Date, default: function () { return Date.now(); } },
+		updated_at: { type: Date, default: function () { return Date.now(); } },
+		label     : { type: String, required: true, unique: true }
+	});
+	var msTask = new mongoose.Schema({
 		_creator   : String,
 		created_at : { type: Date, default: function () { return Date.now(); } },
 		updated_at : { type: Date, default: function () { return Date.now(); } },
-		label      : { type: String, required: true, unique: true }
-	});
-	var msTask = new mongoose.Schema({
-		_creator    : String,
-		created_at  : { type: Date, default: function () { return Date.now(); } },
-		updated_at  : { type: Date, default: function () { return Date.now(); } },
-		due_at      : { type: Date, default: function () { return Date.now(); } },
-		label       : { type: String, required: true, unique: true },
-		description : String
+		due_at     : { type: Date, default: function () { return Date.now(); } },
+		label      : { type: String, required: true, unique: true },
+		description: String,
+		parent     : { type: mongoose.Schema.Types.ObjectId, ref: 'children' }, // Linked document is Task
+		tagLinks   : [msLinkTaskTag],
 	});
 
 	mas.Schemas = {
diff --git a/app/src/routes/api.links.js b/app/src/routes/api.links.js
new file mode 100644
index 0000000..a46430f
--- /dev/null
+++ b/app/src/routes/api.links.js
@@ -0,0 +1,55 @@
+//------------------------------------------
+// API CONTROLLERS FOR DB ACCESS
+//------------------------------------------
+
+module.exports = function(mas, securityProxy){
+
+	mas.get("/api/links-note-tag", mas.security.proxy("user"), function (req, res) {
+		return mas.Models.LinkNoteTag.find({'_creator': req.session.user._id }, function(err, links) {
+			if (!links) { return res.send(403,"Access is forbidden or no data"); }
+			if (!err) { return res.send(links); }
+			else { return res.send(400,"Impossible to retrieve data : "+err); }
+		});
+	});
+	mas.get("/api/links-note-tag/:id", mas.security.proxy("user"), function (req, res) {
+		return mas.Models.LinkNoteTag.findOne({'_creator': req.session.user._id, '_id': req.params.id}, function(err, link) {
+			if (!link) { return res.send(403,"Access is forbidden or no data"); }
+			if (!err) { return res.send(link); }
+			else { return res.send(400,"Impossible to retrieve data : "+err); }
+		});
+	});
+	mas.put("/api/links-note-tag/:id", mas.security.proxy("user"), function (req, res) {
+		return mas.Models.LinkNoteTag.findOne({'_creator': req.session.user._id, '_id': req.params.id}, function(err, link) {
+			if (!link) { return res.send(403,"Access is forbidden or no data"); }
+
+			link.note = req.body.note;
+			link.tag  = req.body.tag;
+
+			return link.save(function(err) {
+				if (!err) { return res.send(link); }
+				else { return res.send(400,"Impossible to update data : "+err); }
+			});
+		});
+	});
+	mas.post("/api/links-note-tag", mas.security.proxy("user"), function (req, res) {
+		var link = new mas.Models.LinkNoteTag ({
+			note : req.body.note,
+			tag  : req.body.tag,
+		});
+
+		return link.save(function(err) {
+			if (!err) { return res.send(note); }
+			else { return res.send(400,"Impossible to save data : "+err); }
+		});
+	});
+	mas.delete("/api/links-note-tag/:id", mas.security.proxy("user"), function (req, res) {
+		return mas.Models.LinkNoteTag.findOne({'_creator': req.session.user._id, '_id': req.params.id}, function(err, link) {
+			if (!link) { return res.send(403,"Access is forbidden or no data"); }
+
+			return link.remove(function(err) {
+				if (!err) { return res.send(200, 'Deletion complete'); }
+				else { return res.send(400,"Impossible to delete data : "+err); }
+			});
+		});
+	});
+}
\ No newline at end of file
diff --git a/app/src/routes/api.notes.js b/app/src/routes/api.notes.js
index 1aaf085..340f94a 100644
--- a/app/src/routes/api.notes.js
+++ b/app/src/routes/api.notes.js
@@ -27,14 +27,17 @@ module.exports = function(mas, securityProxy){
 			note.title      = req.body.title;
 			note.content    = req.body.content;
 			note.tagLinks   = req.body.tagLinks;
-			console.log(note.tagLinks);
+			note.taskLinks  = req.body.taskLinks;
+
+			console.log(note);
+
 			return note.save(function(err) {
 				if (!err) {
 					console.log("updated");
 					return res.send(note);
 				} else {
 					console.log(err);
-					return res.send(400,'Wrong parameters');
+					return res.send(400,"Impossible to save // "+err.err);
 				}
 			});
 		});
@@ -46,14 +49,19 @@ module.exports = function(mas, securityProxy){
 			updated_at: req.body.updated_at,
 			title     : req.body.title,
 			content   : req.body.content,
+			tagLinks  : req.body.tagLinks,
+			taskLinks : req.body.taskLinks,
 		});
+
+		console.log(req.body);
+
 		note.save(function(err) {
 			if (!err) {
 				console.log("created");
 				return res.send(note);
 			} else {
 				console.log(err);
-				return res.send(400,"Bad request");
+				return res.send(400,"Impossible to save // "+err.err);
 			}
 		});
 	});
diff --git a/app/src/routes/api.tags.js b/app/src/routes/api.tags.js
index bab0891..80ba898 100644
--- a/app/src/routes/api.tags.js
+++ b/app/src/routes/api.tags.js
@@ -22,15 +22,18 @@ module.exports = function(mas, securityProxy){
 		return mas.Models.Tag.findOne({'_creator': req.session.user._id, '_id': req.params.id}, function(err, tag) {
 			if (!tag) {return res.send(403,"Forbidden");}
 
-			tag.created_at  = req.body.created_at;
-			tag.updated_at  = req.body.updated_at;
+			tag.created_at = req.body.created_at;
+			tag.updated_at = req.body.updated_at;
 			tag.label      = req.body.label;
+
+			console.log(tag);
+
 			return tag.save(function(err) {
 				if (!err) {
 					console.log("updated");
 				} else {
 					console.log(err);
-					return res.send(400,"Bad request");
+					return res.send(400,"Impossible to save // "+err.err);
 				}
 				return res.send(tag);
 			});
@@ -38,18 +41,21 @@ module.exports = function(mas, securityProxy){
 	});
 	mas.post("/api/tags", mas.security.proxy("user"), function (req, res) {
 		var tag = new mas.Models.Tag ({
-			_creator   : req.session.user._id,
-			created_at : req.body.created_at,
-			updated_at : req.body.updated_at,
-			label      : req.body.label
+			_creator  : req.session.user._id,
+			created_at: req.body.created_at,
+			updated_at: req.body.updated_at,
+			label     : req.body.label,
 		});
+
+		console.log(req.body);
+
 		tag.save(function(err) {
 			if (!err) {
 				console.log("created");
 				return res.send(tag);
 			} else {
 				console.log(err);
-				return res.send(400,"Bad request");
+				return res.send(400,"Impossible to save // "+err.err);
 			}
 		});
 	});
diff --git a/app/src/routes/api.tasks.js b/app/src/routes/api.tasks.js
index f318aa8..e1b7aa3 100644
--- a/app/src/routes/api.tasks.js
+++ b/app/src/routes/api.tasks.js
@@ -27,33 +27,45 @@ module.exports = function(mas, securityProxy){
 			task.due_at      = req.body.due_at;
 			task.label       = req.body.label;
 			task.description = req.body.description;
+			task.parent      = req.body.parent;
+			task.noteLinks   = req.body.noteLinks;
+			task.tagLinks    = req.body.tagLinks;
+
+			console.log(task);
+
 			return task.save(function(err) {
 				if (!err) {
 					console.log("updated");
+					return res.send(task);
 				} else {
 					console.log(err);
-					return res.send(400,"Bad request");
+					return res.send(400,"Impossible to save // "+err.err);
 				}
-				return res.send(task);
 			});
 		});
 	});
 	mas.post("/api/tasks", mas.security.proxy("user"), function (req, res) {
 		var task = new mas.Models.Task ({
-			_creator    : req.session.user._id,
-			created_at  : req.body.created_at,
-			updated_at  : req.body.updated_at,
-			due_at      : req.body.due_at,
-			label       : req.body.label,
-			description : req.body.description
+			_creator   : req.session.user._id,
+			created_at : req.body.created_at,
+			updated_at : req.body.updated_at,
+			due_at     : req.body.due_at,
+			label      : req.body.label,
+			description: req.body.description,
+			parent     : req.body.parent,
+			noteLinks  : req.body.noteLinks,
+			tagLinks   : req.body.tagLinks,
 		});
+
+		console.log(req.body);
+
 		task.save(function(err) {
 			if (!err) {
 				console.log("created");
 				return res.send(task);
 			} else {
 				console.log(err);
-				return res.send(400,"Bad request");
+				return res.send(400,"Impossible to save // "+err.err);
 			}
 		});
 	});
diff --git a/app/src/views/clientSideTemplates.html b/app/src/views/clientSideTemplates.html
index f4a60df..decd545 100644
--- a/app/src/views/clientSideTemplates.html
+++ b/app/src/views/clientSideTemplates.html
@@ -30,14 +30,7 @@
 		<section contentEditable class="edit-content editable mousetrap"><%= content %></section>
 	</article>
 </script>
-<script type="text/template" id="editor-body-tag-template" style="display: none;">
-	<label class='datalist-wrapper'>
-		<datalist id='datalist_<%= id %>' class='datalist'>
-		</datalist>
-		<input class='body mousetrap' type='text' name='datalist_<%= id %>' list='datalist_<%= id %>'>
-	</label>
-</script>
-<script type="text/template" id="editor-body-task-template" style="display: none;">
+<script type="text/template" id="editor-body-object-template" style="display: none;">
 	<label class='datalist-wrapper'>
 		<datalist id='datalist_<%= id %>' class='datalist'>
 		</datalist>
diff --git a/app/src/views/index.jade b/app/src/views/index.jade
index 59fd41b..e60b60f 100644
--- a/app/src/views/index.jade
+++ b/app/src/views/index.jade
@@ -33,6 +33,7 @@ block content
 	script(src="javascripts/models/task.js")
 	script(src="javascripts/models/link-note-tag.js")
 	script(src="javascripts/models/link-note-task.js")
+	script(src="javascripts/models/link-task-tag.js")
 	script(src="javascripts/models/filter-object.js")
 	script(src="javascripts/models/filter-note.js")
 	script(src="javascripts/models/filter-task.js")
@@ -40,7 +41,9 @@ block content
 	script(src="javascripts/collections/notes.js")
 	script(src="javascripts/collections/tags.js")
 	script(src="javascripts/collections/tasks.js")
-	script(src="javascripts/collections/link-note-tag.js")
+	script(src="javascripts/collections/links-note-tag.js")
+	script(src="javascripts/collections/links-note-task.js")
+	script(src="javascripts/collections/links-task-tag.js")
 	script(src="javascripts/collections/filters-object.js")
 	script(src="javascripts/collections/filters-note.js")
 	script(src="javascripts/collections/filters-task.js")
@@ -58,8 +61,9 @@ block content
 	script(src="javascripts/views/helper.js")
 	script(src="javascripts/views/editor-tab.js")
 	script(src="javascripts/views/editor-body.js")
-	script(src="javascripts/views/editor-body-tag.js")
-	script(src="javascripts/views/editor-body-task.js")
+	script(src="javascripts/views/editor-body-object.js")
+	//script(src="javascripts/views/editor-body-tag.js")
+	//script(src="javascripts/views/editor-body-task.js")
 	script(src="javascripts/views/editor.js")
 	script(src="javascripts/l18n/"+ locale + ".js")
 	script(src="javascripts/views/main.js")
diff --git a/app/src/views/stylesheets/index.styl b/app/src/views/stylesheets/index.styl
index a3b796a..6e96f04 100644
--- a/app/src/views/stylesheets/index.styl
+++ b/app/src/views/stylesheets/index.styl
@@ -239,9 +239,17 @@ nav
 	.filter-editor
 		li
 			display inline-block
-			border 1px solid grey
-			&.active
-				border 1px solid red
+			opacity 0.6
+			padding 0.3em
+			margin 0 0.5em 0 0
+			font-size 0.9em
+			&.active, &:hover
+				opacity 1
+			&:hover
+				cursor pointer
+			&:before
+				opacity 0.6
+				margin-right 0.5em
 	ul.objects
 		list-style-type none
 		margin 1em 0 0
diff --git a/appSrv.js b/appSrv.js
index 93c9eed..8dc3832 100644
--- a/appSrv.js
+++ b/appSrv.js
@@ -77,9 +77,9 @@ require('./app/src/routes/api.tags.js')(mas);
 require('./app/src/routes/api.tasks.js')(mas);
 
 //------------------------------------------
-// START SERVER
+// START HTTP SERVER
 //------------------------------------------
 
 http.createServer(mas).listen(mas.get('port'), function(){
-  console.log("Node.js / Express server listening on port " + mas.get('port') + " in " + mas.get('mode') + " mode");
+  console.log("Node.js / Express HTTP server listening on port " + mas.get('port') + " in " + mas.get('mode') + " mode");
 });
\ No newline at end of file
diff --git a/devnotes.txt b/devnotes.txt
index f2eaa05..4436fc3 100644
--- a/devnotes.txt
+++ b/devnotes.txt
@@ -100,4 +100,29 @@ cas de figure (3) :
 28/02/2014
 Chain of events / use cases :
 1. Rajout de filtres dans le superInput
-2. J'active un de mes filtres prédéfinis
\ No newline at end of file
+2. J'active un de mes filtres prédéfinis
+
+02/03/2014
+Task model seems OK
+Need to implement new models for relating notes to tasks
+Need to implement new collections to store links
+
+
+20/03/2014
+On va tester deux méthodes :
+    console.log('------ trying to link '+this.options.modelClass);
+    this.model.get('noteLinks').add( { note: this.options.note } );
+    this.model.save({},{ 
+Soit on sauvegarde depuis l'objet (AS IS) soit on sauvegarder depuis la note.
+Dans tous les cas on ne touche pas à la modélisation relational dans les models
+On regarde ce qui est envoyé à mongodb et comment ça stocke les liens
+Valider qu'il n'y a pas de doublons.
+
+Question : est-ce que l'utilisation du Backend Mongoose oblige à sérialiser les relations dans chaque objet impliqué ? Si oui, on stocke 10x trop !
+
+26/03
+Résultat des tests server-side : mongoose permet de créer des liens et de rapatrier les jointures via populate()
+En revanche, les relations inverses ne sont pas recréées. Il faut donc soit maintenir des pointeurs de chaque côté de la relation, soit stocker la relation d'un seul côté, soit créer une table de relations qui stocke les pointeurs des deux côtés.
+Sachant que Backbone sait recréer les relations en les renseignant d'un seul côté, le prochain test devra démontrer qu'on peut stocker des subdocs de rels dans notes et interroger via notes.get('tags') et tags.get('notes').
+
+Première tentative : stockage/serialization des relations dans notes (tags & tasks) et tasks (parent)
\ No newline at end of file
diff --git a/package.json b/package.json
index 6047924..e59bd75 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,7 @@
     "jade": "*",
     "stylus": "*",
     "nib": "*",
-    "mongoose": "*",
+    "mongoose": ">=3.6.*",
     "negotiator": "~0.2.6"
   }
 }
diff --git a/public/javascripts/collections/link-note-tag.js b/public/javascripts/collections/link-note-tag.js
deleted file mode 100644
index b75c51c..0000000
--- a/public/javascripts/collections/link-note-tag.js
+++ /dev/null
@@ -1,7 +0,0 @@
-var meenoAppCli = meenoAppCli || {};
-meenoAppCli.Classes = meenoAppCli.Classes || {};
-
-meenoAppCli.Classes.LinkNoteTags = Backbone.Collection.extend({
-	model: meenoAppCli.Classes.LinkNoteTag, 
-	url: '/api/link-note-tag',
-});
\ No newline at end of file
diff --git a/public/javascripts/collections/links-note-tag.js b/public/javascripts/collections/links-note-tag.js
new file mode 100644
index 0000000..9e3a3ee
--- /dev/null
+++ b/public/javascripts/collections/links-note-tag.js
@@ -0,0 +1,7 @@
+var meenoAppCli = meenoAppCli || {};
+meenoAppCli.Classes = meenoAppCli.Classes || {};
+
+meenoAppCli.Classes.LinksNoteTag = Backbone.Collection.extend({
+	model: meenoAppCli.Classes.LinkNoteTag,
+	url: '/api/links-note-tag',
+});
\ No newline at end of file
diff --git a/public/javascripts/collections/links-note-task.js b/public/javascripts/collections/links-note-task.js
new file mode 100644
index 0000000..6067882
--- /dev/null
+++ b/public/javascripts/collections/links-note-task.js
@@ -0,0 +1,7 @@
+var meenoAppCli = meenoAppCli || {};
+meenoAppCli.Classes = meenoAppCli.Classes || {};
+
+meenoAppCli.Classes.LinksNoteTask = Backbone.Collection.extend({
+	model: meenoAppCli.Classes.LinkNoteTask,
+	url: '/api/links-note-task',
+});
\ No newline at end of file
diff --git a/public/javascripts/collections/links-task-tag.js b/public/javascripts/collections/links-task-tag.js
new file mode 100644
index 0000000..277e71f
--- /dev/null
+++ b/public/javascripts/collections/links-task-tag.js
@@ -0,0 +1,7 @@
+var meenoAppCli = meenoAppCli || {};
+meenoAppCli.Classes = meenoAppCli.Classes || {};
+
+meenoAppCli.Classes.LinksTaskTag = Backbone.Collection.extend({
+	model: meenoAppCli.Classes.LinkTaskTag,
+	url: '/api/links-task-tag',
+});
\ No newline at end of file
diff --git a/public/javascripts/models/link-task-tag.js b/public/javascripts/models/link-task-tag.js
new file mode 100644
index 0000000..d19b104
--- /dev/null
+++ b/public/javascripts/models/link-task-tag.js
@@ -0,0 +1,7 @@
+var meenoAppCli = meenoAppCli || {};
+meenoAppCli.Classes = meenoAppCli.Classes || {};
+
+// A link object between 'Task' and 'Tag'
+meenoAppCli.Classes.LinkTaskTag = Backbone.RelationalModel.extend({
+	idAttribute: "_id"
+});
\ No newline at end of file
diff --git a/public/javascripts/models/note.js b/public/javascripts/models/note.js
index 12e0e07..555ca7c 100644
--- a/public/javascripts/models/note.js
+++ b/public/javascripts/models/note.js
@@ -4,21 +4,18 @@ meenoAppCli.Classes = meenoAppCli.Classes || {};
 meenoAppCli.Classes.Note = Backbone.RelationalModel.extend({
 	idAttribute: '_id',
 	relations: [{
-		type: 'HasMany',
-		key: 'tagLinks',
-		relatedModel: 'meenoAppCli.Classes.LinkNoteTag',
-		reverseRelation: {
-			key: 'note',
-			includeInJSON: '_id'
+		type            : 'HasMany',
+		key             : 'tagLinks',
+		relatedModel    : 'meenoAppCli.Classes.LinkNoteTag',
+		reverseRelation : {
+			key           : 'note',
 		}
-	},
-	{
-		type: 'HasMany',
-		key: 'taskLinks',
-		relatedModel: 'meenoAppCli.Classes.LinkNoteTask',
-		reverseRelation: {
-			key: 'note',
-			includeInJSON: '_id',
+	},{
+		type            : 'HasMany',
+		key             : 'taskLinks',
+		relatedModel    : 'meenoAppCli.Classes.LinkNoteTask',
+		reverseRelation : {
+			key           : 'note',
 		}
 	}],
 	defaults: function() {
diff --git a/public/javascripts/models/tag.js b/public/javascripts/models/tag.js
index 78a308b..c47538a 100644
--- a/public/javascripts/models/tag.js
+++ b/public/javascripts/models/tag.js
@@ -4,12 +4,18 @@ meenoAppCli.Classes = meenoAppCli.Classes || {};
 meenoAppCli.Classes.Tag = Backbone.RelationalModel.extend({
 	idAttribute: "_id",
 	relations: [{
-		type: 'HasMany',
-		key: 'noteLinks',
-		relatedModel: 'meenoAppCli.Classes.LinkNoteTag',
-		reverseRelation: {
-			key: 'tag',
-			includeInJSON: '_id'
+		type            : 'HasMany',
+		key             : 'noteLinks',
+		relatedModel    : 'meenoAppCli.Classes.LinkNoteTag',
+		reverseRelation : {
+			key           : 'tag',
+		}
+	},{
+		type            : 'HasMany',
+		key             : 'taskLinks',
+		relatedModel    : 'meenoAppCli.Classes.LinkTaskTag',
+		reverseRelation : {
+			key           : 'tag',
 		}
 	}],
 	defaults: function() {
diff --git a/public/javascripts/models/task.js b/public/javascripts/models/task.js
index aad50df..558c3ad 100644
--- a/public/javascripts/models/task.js
+++ b/public/javascripts/models/task.js
@@ -4,12 +4,19 @@ meenoAppCli.Classes = meenoAppCli.Classes || {};
 meenoAppCli.Classes.Task = Backbone.RelationalModel.extend({
 	idAttribute: "_id",
 	relations: [{
-		type: 'HasMany',
-		key: 'noteLinks',
-		relatedModel: 'meenoAppCli.Classes.LinkNoteTask',
+		type           : 'HasOne',
+		key            : 'parent',
+		relatedModel   : 'meenoAppCli.Classes.Task',
+		includeInJSON  : '_id',
 		reverseRelation: {
-			key: 'task',
-			includeInJSON: '_id'
+			key           : 'children',
+		}
+	},{
+		type           : 'HasMany',
+		key            : 'tagLinks',
+		relatedModel   : 'meenoAppCli.Classes.LinkTaskTag',
+		reverseRelation: {
+			key           : 'task',
 		}
 	}],
 	defaults: function() {
diff --git a/public/javascripts/views/browser-body-note.js b/public/javascripts/views/browser-body-note.js
index 49eaddb..bb800ea 100644
--- a/public/javascripts/views/browser-body-note.js
+++ b/public/javascripts/views/browser-body-note.js
@@ -8,7 +8,7 @@ meenoAppCli.Classes.BrowserBodyNoteView = meenoAppCli.Classes.BrowserBodyObjectV
 	// Renders the note item to the current state of the model
 	render: function () {
 		this.collName = "notes";
-		console.log ("R[Browser-body-note]");
+		//console.log ("R[Browser-body-note]");
 		var json        = this.model.toJSON();
 		json.created_at = json.created_at.toString('dddd, MMMM ,yyyy');
 		json = {
diff --git a/public/javascripts/views/browser-body-tag.js b/public/javascripts/views/browser-body-tag.js
index 6d49cf7..ee84841 100644
--- a/public/javascripts/views/browser-body-tag.js
+++ b/public/javascripts/views/browser-body-tag.js
@@ -16,7 +16,7 @@ meenoAppCli.Classes.BrowserBodyTagView = meenoAppCli.Classes.BrowserBodyObjectVi
 	// Renders the tag item to the current state of the model
 	render: function() {
 		this.collName = "tags";
-		console.log ("R[Browser-body-tag]");
+		//console.log ("R[Browser-body-tag]");
 		var templateFn = _.template( $(this.template).html() );
 		this.$el.html (templateFn (this.model.toJSON()));
 		meenoAppCli.dispatcher.trigger("browser:tags:reSyncSelectors");
diff --git a/public/javascripts/views/browser-body-task.js b/public/javascripts/views/browser-body-task.js
index 330e12e..8270bcd 100644
--- a/public/javascripts/views/browser-body-task.js
+++ b/public/javascripts/views/browser-body-task.js
@@ -16,7 +16,7 @@ meenoAppCli.Classes.BrowserBodyTaskView = meenoAppCli.Classes.BrowserBodyObjectV
 	// Renders the tag item to the current state of the model
 	render: function() {
 		this.collName = "tasks";
-		console.log ("R[Browser-body-task]");
+		//console.log ("R[Browser-body-task]");
 		var templateFn = _.template( $(this.template).html() );
 		this.$el.html (templateFn (this.model.toJSON()));
 		meenoAppCli.dispatcher.trigger("browser:tasks:reSyncSelectors");
diff --git a/public/javascripts/views/browser-body.js b/public/javascripts/views/browser-body.js
index 669f145..7ecc52d 100644
--- a/public/javascripts/views/browser-body.js
+++ b/public/javascripts/views/browser-body.js
@@ -45,7 +45,7 @@ meenoAppCli.Classes.BrowserBodyView = Backbone.View.extend ({
 		};
 
 		this.listenTo(this.options.collections.notes, 'add remove change:title add:tagLinks', function () {this.renderCollection("notes");});
-		this.listenTo(this.options.collections.tags, 'add remove change:label', function () {this.renderCollection("tags");});
+		this.listenTo(this.options.collections.tags, 'add remove change:label', function () {this.renderCollection("tags"); this.renderCollection("notes");});
 		this.listenTo(this.options.collections.tasks, 'add remove change:label', function () {this.renderCollection("tasks");});
 		this.listenTo(this.options.collections.noteFilters, 'add remove', function () {this.renderFilterCollection("noteFilters");});
 		this.listenTo(this.options.collections.taskFilters, 'add remove', function () {this.renderFilterCollection("taskFilters");});
@@ -399,7 +399,10 @@ meenoAppCli.Classes.BrowserBodyView = Backbone.View.extend ({
 		// Third, filling the DOM again
 		var newView = {};
 
-		this.options.collections[collName].search(this.filters[filterName]).each(function (element) { // for now we ignore complex searches
+		var results = this.options.collections[collName].search(this.filters[filterName]);
+		//console.log("// Search returned "+results.length+" item(s)");
+		//console.log(results);
+		results.each(function (element) { // for now we ignore complex searches
 			if (collName == "notes") { newView = new meenoAppCli.Classes.BrowserBodyNoteView({ model: element }); }
 			if (collName == "tags") { newView = new meenoAppCli.Classes.BrowserBodyTagView({ model: element }); }
 			if (collName == "tasks") { newView = new meenoAppCli.Classes.BrowserBodyTaskView({ model: element }); }
diff --git a/public/javascripts/views/editor-body-object.js b/public/javascripts/views/editor-body-object.js
new file mode 100644
index 0000000..da64b0c
--- /dev/null
+++ b/public/javascripts/views/editor-body-object.js
@@ -0,0 +1,158 @@
+var meenoAppCli     = meenoAppCli || {};
+meenoAppCli.Classes = meenoAppCli.Classes || {};
+
+meenoAppCli.Classes.EditorBodyObjectView = Backbone.View.extend({
+	// this.options.modelClass = 'tag' OR 'task'
+	tagName   :'span',
+	template  :'#editor-body-object-template',
+	className :'object',
+
+	// The DOM events specific to an item.
+	events: {
+		'input'    : 'autocomplete',
+		'keypress' : 'keyProxy'
+	},
+
+	initialize: function() {
+		this.options.isLocked = false;
+		Backbone.View.prototype.initialize.apply(this, arguments);
+
+		if (this.model) {
+			this.options.id = this.$el.attr('id');
+			this.options.isLocked = true;
+			this.listenTo(this.model, 'change', this.render);
+			this.listenTo(this.model, 'remove', this.kill);
+		} else {
+			this.options.id = makeid();
+		}
+		this.listenTo(this.options.note, 'change:content', this.checkChanges);
+	},
+
+	checkChanges: function () {
+		if (this.options.parentDOM.find(this.$el).length === 0) {
+			console.log(this.cid+"'s DOM element has been removed");
+			if (!this.model) {
+				this.kill();
+			} else {
+				this.unlink();
+			}
+		}
+		else {console.log(this.cid+"'s DOM element still exists");}
+	},
+
+	keyProxy: function(event) {
+		if (event.keyCode == 13 || event.keyCode == 9) {
+			this.lock();
+		}
+	},
+
+	render: function() {
+		console.log ('R[emb-'+this.options.modelClass+']');
+		this.$el.attr('id', this.options.id);
+		this.$el.attr('contentEditable',false);
+		var templateData = {
+			id       : this.options.id,
+		};
+		var templateFn = _.template( $(this.template).html() );
+		this.$el.html( templateFn( templateData ) );
+		if (!this.$el.hasClass(this.options.modelClass)) { this.$el.addClass(this.options.modelClass); }
+		if (!this.$el.hasClass('icon-'+this.options.modelClass+'s')) { this.$el.addClass('icon-'+this.options.modelClass+'s'); }
+		return this;
+	},
+
+	autocomplete: function() {
+		console.log('autocomplete');
+		var strHint = (this.$(".body").val());
+		if (strHint.length > -1) {
+			var pattern = new RegExp(strHint,"i");
+			var proposals = meenoAppCli[this.options.modelClass+'s'].filter(function (model) {
+				return pattern.test(model.get('label'));
+			});
+			var datalistOptions = proposals.map(function (obj, key) {
+				return "<option class='trick' data-model-id='"+obj.get('_id')+"' value='"+obj.get('label')+"'>"+obj.get('label')+"</option>";
+			});
+			this.$(".datalist").html(datalistOptions);
+		}
+	},
+
+	error: function (msg) {
+		console.error(msg);
+		this.$el.addClass("broken");
+	},
+
+	lock: function (event) {
+		console.log("locking");
+		var modelClassName = this.options.modelClass.replace(/^(.)/, function($1){ return $1.toUpperCase( ); });
+		var self = this;
+		if (!this.options.isLocked) {
+			if (this.$('.body').val().length <= 2) {
+				console.log('##WARNING## '+this.options.modelClass+' too short to lock'); // We save only tasks/tags of more than 2 characters
+			} else {
+				console.log('______ Locking Object ______');
+
+				var selectedModel = meenoAppCli[this.options.modelClass+'s'].find(function (model) {
+					return model.get('label') == self.$(".body").val();
+				});
+
+				if (!selectedModel) {
+				// If the model doesn't exist, we create it
+					console.log('--- Creating new '+this.options.modelClass+' ---');
+					this.model = new meenoAppCli.Classes[modelClassName]({
+						label : this.$(".body").val()
+					});
+					meenoAppCli[this.options.modelClass+'s'].add(this.model,{merge: true}); // We add it to the collection in case it has been freshly created
+					// Now that the model is into a collection, the .save() method will work
+					this.model.save({}, {
+						success: function () { console.log ("[OK] "+self.options.modelClass+" successfully created")},
+						error  : function () { self.error("### Impossible to link "+self.options.modelClass); }
+					});
+				} else {
+				// The model already exists, so we retrieve it
+					if (_.contains(selectedModel.get('noteLinks').pluck('note'), this.options.note)) {
+						console.log(this.options.modelClass+' already linked to this note');
+						return;
+					}
+					this.model = selectedModel;
+				}
+
+				// Linking view's model (created or retrieved) to the note
+				console.log('------ trying to link '+this.options.modelClass);
+				
+				if (this.options.modelClass == "tag") {
+					this.options.note.get('tagLinks').add({tag : this.model});
+				} else {
+					this.options.note.get('taskLinks').add({task : this.model});
+				}
+				// var link = new meenoAppCli.Classes["linkNote"+modelClassName] ({});
+				// link.set('note', this.options.note);
+				// link.set(this.options.modelClass, this.model);
+				// meenoAppCli["linkNote"+modelClassName].add(link);
+				this.options.note.save({},{ 
+					success: function () {
+						var $newSpan = $("<span>",{class:"body"}).html(self.model.get('label'));
+						self.$(".body").parent().remove();
+						self.$el.append($newSpan);
+						self.$el.removeClass("broken");
+						self.$el.addClass("locked");
+						self.$el.attr("data-model-id",self.model.get("_id"));
+						self.isLocked = true;
+						moveCaret (self.$el.next()[0], 1); // Moving the caret out of the object
+						console.log("[OK] "+self.options.modelClass+' "'+self.model.get('label')+'" linked to current note');
+						self.options.isLocked = true;
+					},
+					error  : function () {self.error("### Impossible to link "+self.options.modelClass);}
+				});
+			}
+		}
+	},
+
+	unlink: function () {
+		var self = this;
+		var link2remove = this.model.get('noteLinks').find(function(noteLink){return noteLink.get(self.options.modelClass) == self.model; });
+		//this.model.get('noteLinks').remove(link2remove);
+		link2remove.destroy({},{
+			success: function () {console.log('Object successfully unlinked');self.kill();},
+			error: function () {console.error('Impossible to unlink object');self.kill();}
+		});
+	}
+});
\ No newline at end of file
diff --git a/public/javascripts/views/editor-body-tag.js b/public/javascripts/views/editor-body-tag.js
deleted file mode 100644
index ce66f33..0000000
--- a/public/javascripts/views/editor-body-tag.js
+++ /dev/null
@@ -1,149 +0,0 @@
-var meenoAppCli     = meenoAppCli || {};
-meenoAppCli.Classes = meenoAppCli.Classes || {};
-
-meenoAppCli.Classes.EditorBodyTagView = Backbone.View.extend({
-
-	tagName   :'span',
-	className :'object tag icon-tag',
-	template  :'#editor-body-tag-template',
-
-	// The DOM events specific to an item.
-	events: {
-		'input'    : 'autocomplete',
-		'keypress' : 'keyProxy'
-	},
-
-	initialize: function() {
-		this.options.isLocked = false;
-		Backbone.View.prototype.initialize.apply(this, arguments);
-
-		if (this.model) {
-			this.options.id = this.$el.attr('id');
-			this.options.isLocked = true;
-			this.listenTo(this.model, 'change', this.render);
-			this.listenTo(this.model, 'remove', this.kill);
-		} else {
-			this.options.id = makeid();
-		}
-		this.listenTo(this.options.note, 'change:content', this.checkChanges);
-
-		console.log ('Init[emb_tag]');
-	},
-
-	checkChanges: function () {
-		if (this.options.parentDOM.find(this.$el).length === 0) {
-			console.log(this.cid+"'s DOM element has been removed");
-			if (!this.model) {
-				this.kill();
-			} else {
-				this.unlink();
-			}
-		}
-		else {console.log(this.cid+"'s DOM element still exists");}
-	},
-
-	keyProxy: function(event) {
-		if (event.keyCode == 13 || event.keyCode == 9) {
-			this.lock();
-		}
-	},
-
-	render: function() {
-		console.log ("R[emb-tag]");
-		this.$el.attr('id', this.options.id);
-		this.$el.attr('contentEditable',false);
-		var templateData = {
-			id: this.options.id
-		};
-		var templateFn = _.template( $(this.template).html() );
-		this.$el.html( templateFn( templateData ) );
-		return this;
-	},
-
-	autocomplete: function() {
-		console.log('autocomplete');
-		var strHint = (this.$(".body").val());
-		if (strHint.length > -1) {
-			var pattern = new RegExp(strHint,"i");
-			var proposals = meenoAppCli.tags.filter(function (tag) {
-				return pattern.test(tag.get('label'));
-			});
-			var datalistOptions = proposals.map(function (obj, key) {
-				return "<option class='trick' data-model-id='"+obj.get('_id')+"' value='"+obj.get('label')+"'>"+obj.get('label')+"</option>";
-			});
-			this.$(".datalist").html(datalistOptions);
-		}
-	},
-
-	error: function (msg) {
-		console.error(msg);
-		this.$el.addClass("broken");
-	},
-
-	lock: function (event) {
-		console.log("locking");
-		if (!this.options.isLocked) {
-			if (this.$('.body').val().length <= 2) {
-				console.log('##WARNING## tag too short to lock'); // We save only tags of more than 2 characters
-			} else {
-				console.log('______ Locking Object ______');
-
-				var self = this;
-				var selectedModel = meenoAppCli.tags.find(function (tag) {
-					return tag.get('label') == self.$(".body").val();
-				});
-
-				if (!selectedModel) {
-					console.log('--- Creating new tag ---');
-					this.model = new meenoAppCli.Classes.Tag({
-						label : this.$(".body").val()
-					});
-					meenoAppCli.tags.add(this.model,{merge: true}); // We add it to the collection in case it has been freshly created
-					this.model.save({},{ // Now that the model is into a collection, the .save() method will work
-						success: function () {self.link ();},
-						error  : function () {self.error("Impossible to save new model");}
-					});
-				} else {
-					if (_.contains(this.options.note.get('tagLinks').pluck('tag'), selectedModel)) {
-						console.log('tag already linked');
-						return;
-					}
-					console.log('--- Linking to selected tag ---');
-					this.model = selectedModel;
-					this.link ();
-				}
-			}
-		}
-	},
-
-	link: function () {
-		console.log('------ trying to link tag');
-		var self = this;
-		this.options.note.get('tagLinks').add( { tag: this.model } );
-		this.options.note.save({},{
-			success: function () {
-				var $newSpan = $("<span>",{class:"body"}).html(self.model.get('label'));
-				self.$(".body").parent().remove();
-				self.$el.append($newSpan);
-				self.$el.removeClass("broken");
-				self.$el.addClass("locked");
-				self.$el.attr("data-model-id",self.model.get("_id"));
-				self.isLocked = true;
-				moveCaret (self.$el.next()[0], 1); // Moving the caret out of the object
-				console.log('Tag "'+self.model.get('label')+'" linked to current note');
-				self.options.isLocked = true;
-			},
-			error: function () {self.error('Impossible to link new Tag "'+self.model.get('label')+'" to current note');}
-		});
-	},
-
-	unlink: function () {
-		var self = this;
-		var tagLink2rem = this.options.note.get('tagLinks').find(function(tagLink){return tagLink.get('tag') == self.model; });
-		this.options.note.get('tagLinks').remove(tagLink2rem);
-		this.options.note.save ({},{
-			success: function () {console.log('Object successfully unlinked');self.kill();},
-			error: function () {console.error('Impossible to unlink object');self.kill();}
-		});
-	}
-});
\ No newline at end of file
diff --git a/public/javascripts/views/editor-body-task.js b/public/javascripts/views/editor-body-task.js
deleted file mode 100644
index 293c934..0000000
--- a/public/javascripts/views/editor-body-task.js
+++ /dev/null
@@ -1,149 +0,0 @@
-var meenoAppCli     = meenoAppCli || {};
-meenoAppCli.Classes = meenoAppCli.Classes || {};
-
-meenoAppCli.Classes.EditorBodyTaskView = Backbone.View.extend({
-
-	tagName   :'span',
-	className :'object task icon-tasks',
-	template  :'#editor-body-task-template',
-
-	// The DOM events specific to an item.
-	events: {
-		'input'    : 'autocomplete',
-		'keypress' : 'keyProxy'
-	},
-
-	initialize: function() {
-		this.options.isLocked = false;
-		Backbone.View.prototype.initialize.apply(this, arguments);
-
-		if (this.model) {
-			this.options.id = this.$el.attr('id');
-			this.options.isLocked = true;
-			this.listenTo(this.model, 'change', this.render);
-			this.listenTo(this.model, 'remove', this.kill);
-		} else {
-			this.options.id = makeid();
-		}
-		this.listenTo(this.options.note, 'change:content', this.checkChanges);
-
-		console.log ('Init[emb_task]');
-	},
-
-	checkChanges: function () {
-		if (this.options.parentDOM.find(this.$el).length === 0) {
-			console.log(this.cid+"'s DOM element has been removed");
-			if (!this.model) {
-				this.kill();
-			} else {
-				this.unlink();
-			}
-		}
-		else {console.log(this.cid+"'s DOM element still exists");}
-	},
-
-	keyProxy: function(event) {
-		if (event.keyCode == 13 || event.keyCode == 9) {
-			this.lock();
-		}
-	},
-
-	render: function() {
-		console.log ("R[emb-task]");
-		this.$el.attr('id', this.options.id);
-		this.$el.attr('contentEditable',false);
-		var templateData = {
-			id: this.options.id
-		};
-		var templateFn = _.template( $(this.template).html() );
-		this.$el.html( templateFn( templateData ) );
-		return this;
-	},
-
-	autocomplete: function() {
-		console.log('autocomplete');
-		var strHint = (this.$(".body").val());
-		if (strHint.length > -1) {
-			var pattern = new RegExp(strHint,"i");
-			var proposals = meenoAppCli.tasks.filter(function (task) {
-				return pattern.test(task.get('label'));
-			});
-			var datalistOptions = proposals.map(function (obj, key) {
-				return "<option class='trick' data-model-id='"+obj.get('_id')+"' value='"+obj.get('label')+"'>"+obj.get('label')+"</option>";
-			});
-			this.$(".datalist").html(datalistOptions);
-		}
-	},
-
-	error: function (msg) {
-		console.error(msg);
-		this.$el.addClass("broken");
-	},
-
-	lock: function (event) {
-		console.log("locking");
-		if (!this.options.isLocked) {
-			if (this.$('.body').val().length <= 2) {
-				console.log('##WARNING## task too short to lock'); // We save only tasks of more than 2 characters
-			} else {
-				console.log('______ Locking Object ______');
-
-				var self = this;
-				var selectedModel = meenoAppCli.tasks.find(function (task) {
-					return task.get('label') == self.$(".body").val();
-				});
-
-				if (!selectedModel) {
-					console.log('--- Creating new task ---');
-					this.model = new meenoAppCli.Classes.Task({
-						label : this.$(".body").val()
-					});
-					meenoAppCli.tasks.add(this.model,{merge: true}); // We add it to the collection in case it has been freshly created
-					this.model.save({},{ // Now that the model is into a collection, the .save() method will work
-						success: function () {self.link ();},
-						error  : function () {self.error("Impossible to save new model");}
-					});
-				} else {
-					if (_.contains(this.options.note.get('taskLinks').pluck('task'), selectedModel)) {
-						console.log('task already linked');
-						return;
-					}
-					console.log('--- Linking to selected task ---');
-					this.model = selectedModel;
-					this.link ();
-				}
-			}
-		}
-	},
-
-	link: function () {
-		console.log('------ trying to link task');
-		var self = this;
-		this.options.note.get('taskLinks').add( { task: this.model } );
-		this.options.note.save({},{
-			success: function () {
-				var $newSpan = $("<span>",{class:"body"}).html(self.model.get('label'));
-				self.$(".body").parent().remove();
-				self.$el.append($newSpan);
-				self.$el.removeClass("broken");
-				self.$el.addClass("locked");
-				self.$el.attr("data-model-id",self.model.get("_id"));
-				self.isLocked = true;
-				moveCaret (self.$el.next()[0], 1); // Moving the caret out of the object
-				console.log('Task "'+self.model.get('label')+'" linked to current note');
-				self.options.isLocked = true;
-			},
-			error: function () {self.error('Impossible to link new Task "'+self.model.get('label')+'" to current note');}
-		});
-	},
-
-	unlink: function () {
-		var self = this;
-		var taskLink2rem = this.options.note.get('taskLinks').find(function(taskLink){return taskLink.get('task') == self.model; });
-		this.options.note.get('taskLinks').remove(taskLink2rem);
-		this.options.note.save ({},{
-			success: function () {console.log('Object successfully unlinked');self.kill();},
-			error: function () {console.error('Impossible to unlink object');self.kill();}
-		});
-	}
-});
\ No newline at end of file
diff --git a/public/javascripts/views/editor-body.js b/public/javascripts/views/editor-body.js
index 9145f41..6f6d17d 100644
--- a/public/javascripts/views/editor-body.js
+++ b/public/javascripts/views/editor-body.js
@@ -61,35 +61,21 @@ meenoAppCli.Classes.EditorBodyView = Backbone.View.extend({
 			var $object = $(object);
 			var subView = {};
 			var model = {};
-			if ($object.hasClass('tag')) {
-				model = meenoAppCli.tags.get($object.attr('data-model-id'));
-				if (model) {
-					subView  = new meenoAppCli.Classes.EditorBodyTagView({
-						model     : model,
-						el        : $object[0], // We bind the sub view to the element we just created
-						note      : self.model,
-						parent    : self,
-						parentDOM : self.$("section.edit-content")
-					});
-					self.children.push (subView);
-				} else {
-					$object.addClass('broken');
-				}
-			}
-			if ($object.hasClass('task')) {
-				model = meenoAppCli.tasks.get($object.attr('data-model-id'));
-				if (model) {
-					subView  = new meenoAppCli.Classes.EditorBodyTaskView({
-						model     : model,
-						el        : $object[0], // We bind the sub view to the element we just created
-						note      : self.model,
-						parent    : self,
-						parentDOM : self.$("section.edit-content")
-					});
-					self.children.push (subView);
-				} else {
-					$object.addClass('broken');
-				}
+			var modelClass = $object.hasClass('tag') ? "tag" : "task";
+
+			model = meenoAppCli[modelClass+"s"].get($object.attr('data-model-id'));
+			if (model) {
+				subView  = new meenoAppCli.Classes.EditorBodyObjectView({
+					model     : model,
+					modelClass: modelClass,
+					el        : $object[0], // We bind the sub view to the element we just created
+					note      : self.model,
+					parent    : self,
+					parentDOM : self.$("section.edit-content"),
+				});
+				self.children.push (subView);
+			} else {
+				$object.addClass('broken');
 			}
 		});
 		return this;
@@ -112,49 +98,25 @@ meenoAppCli.Classes.EditorBodyView = Backbone.View.extend({
 		if (!this.checkFocus()) {return;} // No action if no focus in the editor
 		console.log('>>> New '+className);
 
-		switch (className) {
-			case "tag":
-				var newTagView = new meenoAppCli.Classes.EditorBodyTagView({
-					note   : this.model,
-					parent : this
-				});
-				newTagView.undelegateEvents();
-				var newTagHtml = $("<div></div>").append(newTagView.render().el).html();
-				pasteHtmlAtCaret(
-					newTagHtml + // The tag itself with a trick to get its html back
-					"<span class='void'>&nbsp;</span>" // A place to put the caret
-				);
-				newTagView.$el = $("#" + newTagView.options.id); // Linking the DOM to the view
-				newTagView.delegateEvents(); // Binding all events
-				newTagView.options.parentDOM = this.$("section.edit-content");
-				newTagView.$(".body").focus(); // Focusing on input
-				this.children.push (newTagView);
-				this.save();
-			break;
-			case "task":
-				var newTaskView = new meenoAppCli.Classes.EditorBodyTaskView({
-					note   : this.model,
-					parent : this
-				});
-				console.log('>>> New task DONE');
-				newTaskView.undelegateEvents();
-				var newTaskHtml = $("<div></div>").append(newTaskView.render().el).html();
-				pasteHtmlAtCaret(
-					newTaskHtml + // The tag itself with a trick to get its html back
-					"<span class='void'>&nbsp;</span>" // A place to put the caret
-				);
-				newTaskView.$el = $("#" + newTaskView.options.id); // Linking the DOM to the view
-				newTaskView.delegateEvents(); // Binding all events
-				newTaskView.options.parentDOM = this.$("section.edit-content");
-				newTaskView.$(".body").focus(); // Focusing on input
-				this.children.push (newTaskView);
-				this.save();
-			break;
-			case "entity":
-				// Don't do anything for now
-				this.save();
-			break;
-		}
+		var newView = new meenoAppCli.Classes.EditorBodyObjectView({
+			note      : this.model,
+			parent    : this,
+			modelClass: className
+		});
+
+		newView.undelegateEvents();
+		var newHtml = $("<div></div>").append(newView.render().el).html();
+		pasteHtmlAtCaret(
+			newHtml + // The tag itself with a trick to get its html back
+			"<span class='void'>&nbsp;</span>" // A place to put the caret
+		);
+		newView.$el = $("#" + newView.options.id); // Linking the DOM to the view
+		newView.delegateEvents(); // Binding all events
+		newView.options.parentDOM = this.$("section.edit-content");
+		newView.$(".body").focus(); // Focusing on input
+		this.children.push (newView);
+		this.save();
+
 		return false;
 	},
 
diff --git a/public/stylesheets/index.css b/public/stylesheets/index.css
index d66fbb2..8e98b22 100644
--- a/public/stylesheets/index.css
+++ b/public/stylesheets/index.css
@@ -68,8 +68,10 @@ nav .object{max-width:7em;white-space:nowrap;overflow:hidden;-o-text-overflow:el
 .listobjects .objectButtons span{background:#d3d3d3;padding:2px 5px;margin:0 5px 0 0}
 .listobjects input.search{border:none}
 .listobjects input.autocomplete{border:1px dotted #808080;margin:0 5px}
-.listobjects .filter-editor li{display:inline-block;border:1px solid #808080;}
-.listobjects .filter-editor li.active{border:1px solid #f00}
+.listobjects .filter-editor li{display:inline-block;opacity:.6;-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";filter:alpha(opacity=60);padding:.3em;margin:0 .5em 0 0;font-size:.9em;}
+.listobjects .filter-editor li.active,.listobjects .filter-editor li:hover{opacity:1;-ms-filter:none;filter:none}
+.listobjects .filter-editor li:hover{cursor:pointer}
+.listobjects .filter-editor li:before{opacity:.6;-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";filter:alpha(opacity=60);margin-right:.5em}
 .listobjects ul.objects{list-style-type:none;margin:1em 0 0;padding:0;}
 .listobjects ul.objects li{margin:0;padding:.5em;}
 .listobjects ul.objects li:hover{background-color:rgba(0,0,0,0.1)}
diff --git a/test/client/jasmine-standalone-1.3.1/SpecRunner.html b/test/client/jasmine-standalone-1.3.1/SpecRunner.html
index 9c66e34..8e4cb65 100644
--- a/test/client/jasmine-standalone-1.3.1/SpecRunner.html
+++ b/test/client/jasmine-standalone-1.3.1/SpecRunner.html
@@ -33,6 +33,7 @@
   <script type="text/javascript" src="../../../public/javascripts/models/task.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/models/link-note-tag.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/models/link-note-task.js"></script>
+  <script type="text/javascript" src="../../../public/javascripts/models/link-task-tag.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/models/filter-object.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/models/filter-note.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/models/filter-task.js"></script>
@@ -40,6 +41,9 @@
   <script type="text/javascript" src="../../../public/javascripts/collections/notes.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/collections/tags.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/collections/tasks.js"></script>
+  <script type="text/javascript" src="../../../public/javascripts/collections/links-note-tag.js"></script>
+  <script type="text/javascript" src="../../../public/javascripts/collections/links-note-task.js"></script>
+  <script type="text/javascript" src="../../../public/javascripts/collections/links-task-tag.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/collections/filters-object.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/collections/filters-note.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/collections/filters-tag.js"></script>
@@ -57,8 +61,7 @@
   <script type="text/javascript" src="../../../public/javascripts/views/helper.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/views/editor-tab.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/views/editor-body.js"></script>
-  <script type="text/javascript" src="../../../public/javascripts/views/editor-body-tag.js"></script>
-  <script type="text/javascript" src="../../../public/javascripts/views/editor-body-task.js"></script>
+  <script type="text/javascript" src="../../../public/javascripts/views/editor-body-object.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/views/editor.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/views/main.js"></script>
   <script type="text/javascript" src="../../../public/javascripts/appCli.js"></script>
diff --git a/test/client/jasmine-standalone-1.3.1/spec/javascripts/fixtures/clientSideTemplates.html b/test/client/jasmine-standalone-1.3.1/spec/javascripts/fixtures/clientSideTemplates.html
index f4a60df..decd545 100644
--- a/test/client/jasmine-standalone-1.3.1/spec/javascripts/fixtures/clientSideTemplates.html
+++ b/test/client/jasmine-standalone-1.3.1/spec/javascripts/fixtures/clientSideTemplates.html
@@ -30,14 +30,7 @@
 		<section contentEditable class="edit-content editable mousetrap"><%= content %></section>
 	</article>
 </script>
-<script type="text/template" id="editor-body-tag-template" style="display: none;">
-	<label class='datalist-wrapper'>
-		<datalist id='datalist_<%= id %>' class='datalist'>
-		</datalist>
-		<input class='body mousetrap' type='text' name='datalist_<%= id %>' list='datalist_<%= id %>'>
-	</label>
-</script>
-<script type="text/template" id="editor-body-task-template" style="display: none;">
+<script type="text/template" id="editor-body-object-template" style="display: none;">
 	<label class='datalist-wrapper'>
 		<datalist id='datalist_<%= id %>' class='datalist'>
 		</datalist>
diff --git a/test/client/spec/model.js b/test/client/spec/model.js
index de54359..be94860 100644
--- a/test/client/spec/model.js
+++ b/test/client/spec/model.js
@@ -54,37 +54,114 @@ describe("Note model", function() {
 			expect(time1 - time0).toBeGreaterThan(0);
 		});
 	});
+});
+
 
-	describe("when filtering a collection with a well-formatted search pattern", function() {
-		it("should return the expected models with text only", function() {
-			this.note.set("title","wanted 1");
-			this.note2.set("title","wanted 2");
-			this.noteFilter.set('text','ted');
+describe("Tag model", function() {
+
+	beforeEach(function() {
+		this.tag = new meenoAppCli.Classes.Tag();
+	});
 
-			expect(this.notes.search(this.noteFilter).length).toEqual(2);
+	describe("when creating a new tag", function() {
+		it("should have a default created_at attribute", function() {
+			expect((new Date()).getTime() - this.tag.get('created_at').getTime()).toBeGreaterThan(-1);
 		});
+		it("should have a default updated_at attribute", function() {
+			expect((new Date()).getTime() - this.tag.get('updated_at').getTime()).toBeGreaterThan(-1);
+		});
+		it("should have a default label attribute", function() {
+			expect(this.tag.get('label')).toBe('New Tag');
+		});
+	});
 
-		it("should return the expected models with text and objects", function() {
-			this.note.set("title","wanted 1");
-			this.note2.set("title","wanted 2");
-			this.note3.set("title","wanted 3");
-			this.note.get('tagLinks').add( { tag: this.tag } );
-			this.note2.get('tagLinks').add( { tag: this.tag } );
-			this.note2.get('taskLinks').add( { task: this.task } );
-			this.note3.get('tagLinks').add( { tag: this.tag } );
-			this.note3.get('taskLinks').add( { task: this.task } );
-
-			this.noteFilter.set('text','wanted');
-			this.noteFilter.get('tags').add(this.tag);
-			this.noteFilter.get('tasks').add(this.task);
-
-			expect(this.notes.search(this.noteFilter).length).toEqual(2);
-			expect(this.notes.search(this.noteFilter).at(0).get('title')).toBe("wanted 2");
-			expect(this.notes.search(this.noteFilter).at(1).get('title')).toBe("wanted 3");
+	describe("when modifying a tag", function() {
+		it("should have updated updated_at attribute", function() {
+			var time0 = this.tag.get('updated_at');
+			// Modify object...
+			var time1 = this.tag.get('updated_at');
+			expect(time1 - time0).toBeGreaterThan(0);
 		});
 	});
 });
 
+describe("Task model", function() {
+
+	beforeEach(function() {
+		this.task = new meenoAppCli.Classes.Task();
+	});
+
+	describe("when creating a new task", function() {
+		it("should have a default created_at attribute", function() {
+			expect((new Date()).getTime() - this.task.get('created_at').getTime()).toBeGreaterThan(-1);
+		});
+		it("should have a default updated_at attribute", function() {
+			expect((new Date()).getTime() - this.task.get('updated_at').getTime()).toBeGreaterThan(-1);
+		});
+		it("should have a default description attribute", function() {
+			expect(this.task.get('description')).toBe('New Task');
+		});
+	});
+
+	describe("when modifying a task", function() {
+		it("should have updated updated_at attribute", function() {
+			var time0 = this.task.get('updated_at');
+			// Modify object...
+			var time1 = this.task.get('updated_at');
+			expect(time1 - time0).toBeGreaterThan(0);
+		});
+	});
+});
+
+describe("Note, tags and tasks model", function() {
+
+	beforeEach(function() {
+		this.note       = new meenoAppCli.Classes.Note({title:"Nouvelle note"});
+		this.note2      = new meenoAppCli.Classes.Note({title:"Nouvelle note bis"});
+		this.note3      = new meenoAppCli.Classes.Note({title:"Nouvelle note ter"});
+		this.tag        = new meenoAppCli.Classes.Tag({label:"My test tag"});
+		this.tag2       = new meenoAppCli.Classes.Tag({label:"My test tag 2"});
+		this.task       = new meenoAppCli.Classes.Task({label:"My test task"});
+		this.task2      = new meenoAppCli.Classes.Task({label:"My test task 2"});
+		this.noteFilter = new meenoAppCli.Classes.NoteFilter();
+		this.notes      = new meenoAppCli.Classes.Notes();
+		this.tags       = new meenoAppCli.Classes.Tags();
+		this.tasks      = new meenoAppCli.Classes.Tasks();
+		this.notes.add(this.note);
+		this.notes.add(this.note2);
+		this.notes.add(this.note3);
+		this.tags.add(this.tag);
+		this.tags.add(this.tag2);
+		this.tasks.add(this.task);
+		this.tasks.add(this.task2);
+	});
+
+	it("Note can be related to a tag and a task", function() {
+		this.note.get('tagLinks').add( { tag: this.tag } );
+		expect(this.note.get('tagLinks').pluck('tag')[0].get('label')).toEqual("My test tag");
+
+		this.note.get('taskLinks').add( { task: this.task } );
+		expect(this.note.get('taskLinks').pluck('task')[0].get('label')).toEqual("My test task");
+	});
+	it("Tag can be related to a note and a task", function() {
+		this.tag.get('noteLinks').add( { note: this.note2 } );
+		expect(this.tag.get('noteLinks').pluck('note')[0].get('title')).toEqual("Nouvelle note bis");
+
+		this.tag.get('taskLinks').add( { task: this.task2 } );
+		expect(this.tag.get('taskLinks').pluck('task')[0].get('label')).toEqual("My test task 2");
+	});
+	it("Task can be related to a note, a tag and a task", function() {
+		this.task.get('noteLinks').add( { note: this.note2 } );
+		expect(this.task.get('noteLinks').pluck('note')[0].get('title')).toEqual("Nouvelle note bis");
+
+		this.task.get('tagLinks').add( { tag: this.tag } );
+		expect(this.task.get('tagLinks').pluck('tag')[0].get('label')).toEqual("My test tag");
+
+		this.task.set('parent', this.task2);
+		expect(this.task.get('parent').get('label')).toEqual("My test task 2");
+	});
+});
+
 
 describe("Filter models", function() {
 
@@ -198,58 +275,61 @@ describe("Filter models", function() {
 	});
 });
 
-describe("Tag model", function() {
-
+describe("Collections of notes, tasks and tags", function() {
 	beforeEach(function() {
-		this.tag = new meenoAppCli.Classes.Tag();
+		this.note       = new meenoAppCli.Classes.Note({title:"Nouvelle note"});
+		this.note2      = new meenoAppCli.Classes.Note({title:"Nouvelle note bis"});
+		this.note3      = new meenoAppCli.Classes.Note({title:"Nouvelle note ter"});
+		this.tag        = new meenoAppCli.Classes.Tag({label:"My test tag"});
+		this.tag2       = new meenoAppCli.Classes.Tag({label:"My test tag 2"});
+		this.task       = new meenoAppCli.Classes.Task({label:"My test task"});
+		this.task2      = new meenoAppCli.Classes.Task({label:"My test task 2"});
+		this.noteFilter = new meenoAppCli.Classes.NoteFilter();
+		this.taskFilter = new meenoAppCli.Classes.TaskFilter();
+		this.tagFilter  = new meenoAppCli.Classes.TagFilter();
+		this.notes      = new meenoAppCli.Classes.Notes();
+		this.tags       = new meenoAppCli.Classes.Tags();
+		this.tasks      = new meenoAppCli.Classes.Tasks();
+		this.notes.add(this.note);
+		this.notes.add(this.note2);
+		this.notes.add(this.note3);
+		this.tags.add(this.tag);
+		this.tags.add(this.tag2);
+		this.tasks.add(this.task);
+		this.tasks.add(this.task2);
 	});
+	it("should provide a search function using objectFilters", function() {
+		// 1. Testing notes
+		this.note.set("title","wanted 1");
+		this.note2.set("title","wanted 2");
+		this.noteFilter.set('text','ted');
 
-	describe("when creating a new tag", function() {
-		it("should have a default created_at attribute", function() {
-			expect((new Date()).getTime() - this.tag.get('created_at').getTime()).toBeGreaterThan(-1);
-		});
-		it("should have a default updated_at attribute", function() {
-			expect((new Date()).getTime() - this.tag.get('updated_at').getTime()).toBeGreaterThan(-1);
-		});
-		it("should have a default label attribute", function() {
-			expect(this.tag.get('label')).toBe('New Tag');
-		});
-	});
+		expect(this.notes.search(this.noteFilter).length).toEqual(2);
 
-	describe("when modifying a tag", function() {
-		it("should have updated updated_at attribute", function() {
-			var time0 = this.tag.get('updated_at');
-			// Modify object...
-			var time1 = this.tag.get('updated_at');
-			expect(time1 - time0).toBeGreaterThan(0);
-		});
-	});
-});
+		this.note.set("title","wanted 1");
+		this.note2.set("title","wanted 2");
+		this.note3.set("title","wanted 3");
+		this.note.get('tagLinks').add( { tag: this.tag } );
+		this.note2.get('tagLinks').add( { tag: this.tag } );
+		this.note2.get('taskLinks').add( { task: this.task } );
+		this.note3.get('tagLinks').add( { tag: this.tag } );
+		this.note3.get('taskLinks').add( { task: this.task } );
+		this.noteFilter.set('text','wanted');
+		this.noteFilter.get('tags').add(this.tag);
+		this.noteFilter.get('tasks').add(this.task);
 
-describe("Task model", function() {
+		expect(this.notes.search(this.noteFilter).length).toEqual(2);
+		expect(this.notes.search(this.noteFilter).at(0).get('title')).toBe("wanted 2");
+		expect(this.notes.search(this.noteFilter).at(1).get('title')).toBe("wanted 3");
 
-	beforeEach(function() {
-		this.task = new meenoAppCli.Classes.Task();
-	});
+		// 2. Testing tasks
+		this.task.set("label","wanted 1");
+		this.task2.set("label","wanted 2");
+		this.task.get('tagLinks').add( { tag: this.tag } );
+		this.taskFilter.set('text','2');
+		this.taskFilter.get('tags').add(this.tag);
 
-	describe("when creating a new task", function() {
-		it("should have a default created_at attribute", function() {
-			expect((new Date()).getTime() - this.task.get('created_at').getTime()).toBeGreaterThan(-1);
-		});
-		it("should have a default updated_at attribute", function() {
-			expect((new Date()).getTime() - this.task.get('updated_at').getTime()).toBeGreaterThan(-1);
-		});
-		it("should have a default description attribute", function() {
-			expect(this.task.get('description')).toBe('New Task');
-		});
-	});
+		expect(this.tasks.search(this.taskFilter).length).toEqual(0);
 
-	describe("when modifying a task", function() {
-		it("should have updated updated_at attribute", function() {
-			var time0 = this.task.get('updated_at');
-			// Modify object...
-			var time1 = this.task.get('updated_at');
-			expect(time1 - time0).toBeGreaterThan(0);
-		});
 	});
 });
\ No newline at end of file
diff --git a/test/client/spec/view-browser.js b/test/client/spec/view-browser.js
index dcf1109..3acc350 100644
--- a/test/client/spec/view-browser.js
+++ b/test/client/spec/view-browser.js
@@ -187,7 +187,7 @@ describe("Browser", function() {
 			it("should refresh the controls displayed when one of its filters is updated", function() {
 				spyOn(this.browser.children.body, 'refreshFilterControls');
 
-				this.browser.children.body.filters.noteFilter.get('tags').add(this.tag); // Updating browser-body's noteFilter
+				this.browser.children.body.filters.noteFilter.get('tags').add(this.note); // Updating browser-body's noteFilter
 				expect(this.browser.children.body.refreshFilterControls).toHaveBeenCalledWith('note');
 				this.browser.children.body.filters.taskFilter.get('tags').add(this.tag); // Updating browser-body's taskFilter
 				expect(this.browser.children.body.refreshFilterControls).toHaveBeenCalledWith('task');
diff --git a/test/server/test.js b/test/server/test.js
new file mode 100644
index 0000000..d2542f5
--- /dev/null
+++ b/test/server/test.js
@@ -0,0 +1,90 @@
+var mongoose = require('mongoose')
+  , Schema = mongoose.Schema;
+
+mongoose.connect('mongodb://localhost/test-meeno');
+
+var Schema = mongoose.Schema
+
+var personSchema = Schema({
+	name    : String,
+	age     : Number,
+	stories : [{ type: Schema.Types.ObjectId, ref: 'Story' }]
+});
+
+var storySchema = Schema({
+	_creator : { type: Schema.Types.ObjectId, ref: 'Person' },
+	title    : String,
+	fans     : [{ type: Schema.Types.ObjectId, ref: 'Person' }]
+});
+
+var Story  = mongoose.model('Story', storySchema);
+var Person = mongoose.model('Person', personSchema);
+
+
+// var aaron = new Person({ _id: 0, name: 'Aaron', age: 100 });
+var aaron   = new Person({ name: 'Aaron16', age: 100 });
+var brandon = new Person({ name: 'Brandon16', age: 10 });
+
+aaron.save(function (err) {
+	if (err) { console.log (err); return; }
+	console.log('[Person] aaron SAVED');
+	console.log ('[Person] %s', aaron);
+
+	var story1 = new Story({
+		title: "Once upon a timex.16",
+		_creator: aaron    // assign the _id from the person
+	});
+
+	story1.save(function (err) {
+		if (err) { console.log (err); return; }
+		console.log('[Story] story1 SAVED');
+		console.log ('[Story] %s', story1);
+		
+		Story
+		.findOne({ title: 'Once upon a timex.16' })
+		.populate('_creator')
+		.exec(function (err, story) {
+			if (err) { console.log (err); return; }
+			console.log ('[Story.findOne] %s', story);
+			console.log ('[Story.findOne.title] %s', story.title);
+			console.log ('[Story.findOne._creator] %s', story._creator);
+			console.log ('[Story.findOne._creator.name] %s', story._creator.name);
+			// prints "The creator is Aaron"
+		});
+
+		aaron.stories.push(story1);
+		aaron.save(function (err) {
+			if (err) { console.log (err); return; }
+			console.log ('[Person] %s', aaron);
+			
+			Person
+			.findOne({ name: 'Aaron16' })
+			.populate('stories')
+			.exec(function (err, person) {
+				if (err) { console.log (err); return; }
+				console.log ('[person.findOne] %s', person);
+			});
+
+			Story
+			.findOne({ title: 'Once upon a timex.16' })
+			.populate('_creator fans')
+			.exec(function (err, story) {
+				if (err) { console.log (err); return; }
+				console.log ('[Story.findOne] %s', story);
+			});
+
+		});
+
+
+
+
+	});
+});
+
+// console.log (story1);
+
+
+
+
+// console.log(story1)
+
